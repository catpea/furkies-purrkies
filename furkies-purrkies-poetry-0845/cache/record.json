{
  "name": "furkies-purrkies-poetry-0845",
  "id": "furkies-purrkies-poetry-0845",
  "title": "A Weird Poem About Visual Programming",
  "date": "2022-06-23T22:09:28.846Z",
  "image": "poetry-0845-illustration.jpg",
  "artwork": "https://catpea.com",
  "audio": "poetry-0845.mp3",
  "guid": "d2b9ab60-43d3-4a63-95c6-4b72a3b34aac",
  "html": "<div class=\"section\">\n  <p>In a way Visual programming is new,<br>and hardly anyone has a clue.</p>\n  <p>It does not come with a guarantee,<br>that is the biggest problem I see.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>In the world of programming,<br>which is a loving, and funny, and wonderfully challenging world.</p>\n  <p>There is this huge question,<br>and even a huge-er problem.</p>\n  <p>The question is:<br>\"Does your program fix problems that people actually have?\"</p>\n  <p>And the huge-er problem, is,<br>that everything is broken.</p>\n  <p>Phone are missing functionality, operating systems keep crashing,<br>new products need firmware upgrades...</p>\n  <p>And if you are thrifty or cheap,<br><a href=\"https://youtu.be/uhyM-bhzFsI?t=674\">hackers have access to a detailed map of your home</a>.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>So what does a visual programming language fix?<br>and is it really broken?</p>\n  <p>The file structure of a program,<br>does not represent what the program does.</p>\n  <p>Visual programming languages,<br>can create maps of the program flow.</p>\n  <p>And if we sprinkle in <a href=\"https://yeoman.io/authoring/\">yeoman templates</a>,<br>we can eat the cake and have the files properly structured too.</p>\n  <p>Is it a problem people have,<br>yeah, programmers have to jump hoops to bridge concepts.</p>\n  <p>Here is an <a href=\"https://rete.js.org/#/docs/controls\">example of a confusing adapter in Rete.js</a>,<br>that is needed to connect an input box to the node in the programming language.</p>\n  <p>It makes code neat, it makes sense,<br>but it also crushes Rete.js programs under their own weight and non-portable code.</p>\n  <p>There is potential here to create a nicer front-end,<br>but unless it comes from the developer then things will get proken pretty soon.</p>\n  <p><a href=\"https://nobackend.org/dreamcode.html\">A really neat example of pretty code, is Dream Code</a>,<br><a href=\"https://www.youtube.com/watch?v=TRKRg1O3H0s\">but the world took a completely different path than this creating even more complexity</a>.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And then the pink elephant that nobody talks about,<br>the web is about text, and maybe navigation maps, not really about connecting boxes together.</p>\n  <p>And beyond that you need a team of developers to create a visual programming language in a reasonable stretch of time,<br>and you may need multiple and unique prototypes to get it right.</p>\n  <p>Even if you request that everything works exactly like Blender's Geometry Nodes,<br>there are no guarantees here, everything is new, and you may end up trying to fix problems that people don't have, anyway.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The web has a wisdom about it self,<br>for one, when a program is written correctly...</p>\n  <p>In as little as one hour,<br>it will already work on big and small screens.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>There is no guarantee that visual programming on a phone,<br>will be fixing the problems that people actually have.</p>\n  <p>All the screen pinching,<br>and messing around with little wires...</p>\n  <p>And trying to connect an output of some math node that is literally two feet away on a smartphone,<br>seems like trouble, and quite a development risk to take.</p>\n  <p>It is a pretty terrible thing to receive a fully functional program after a some months,<br>and then end up not using it for anything.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Imagine hiring a team of developers,<br>and the program just can't work on a little screen, or can't really help anybody with anything.</p>\n  <p>The pink elephant,<br>is a mean creature.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The big problem with visual programming,<br>is passing information to nodes.</p>\n  <p>You may have a play song or sound node,<br>and then you want the user to pick what sound to play.</p>\n  <p>So the play sound node is just a beautiful square box, neat and simple,<br>and it is part of a reasonably readable chain of actions.</p>\n  <p>For example open window, let user pick song, verify something, or make a song purchase,<br>and then you arrive at he play song/sound node and now there is trouble.</p>\n  <p>Because you have to drag something from pick a song node,<br>to play a song node, and after a while you have all these wires everywhere.</p>\n  <p>And no making the wires of the nodes that are not in the view-port transparent,<br>does not help, because we have a mess here, it is a mess.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>We tried to escape from a mess of files,<br>of from the mess of arbitrary GraphQL queries with random data quota, and we just created a mess of wires.</p>\n  <p>And no you can't just group program functions together in to a single node,<br>because the input of that node will still require the wires.</p>\n  <p>Visual Programming the way we have it today,<br>does not yet fix much.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And the elephant is not the only animal in the room,<br>I don't know what animal this is, but it has to do with time travel.</p>\n  <p>Because a programmer, should be allowed to create a node,<br>in behavior description only.</p>\n  <p>And the visual programming language, will complain,<br>that he program cannot run because this node does not yet exist.</p>\n  <p>That the programmer has to create it,<br>and that the created node must pass the behavior test.</p>\n  <p>For example, we say we want an UPPERCASE node,<br>that makes all the letters upercase.</p>\n  <p>And we describe that, the test is to fail until,<br>the word 'cat' (in lowercase) comes out of the node in uppercase.</p>\n  <p>It is a simple test, and a simple mechanism,<br>that allows the creation of large programs, that are yet to be programmed.</p>\n  <p>There can be a bounty back-end where programmers will get bounties,<br>for programming those nodes.</p>\n  <p>Here the developer or a clever company armed with this program,<br>will watch it bubble up into reality.</p>\n  <p>At the very least, the programmer will get a decent todo list,<br>and the project lead, perhaps a reasonable time estimate.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>To add insult to injury,<br>these wire based programs, can sometimes branch creating large trees.</p>\n  <p>Here there maybe a large reuse of variables,<br>as the program takes different routes.</p>\n  <p>And now we triple, or quintuple,<br>the number of wires.</p>\n  <p>Here, trying to fix a quirk that potentially exists on multiple unreadable branches,<br>makes visual programming a real problem, and the whole effort becomes pointless.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And I just want to throw this one last thing in there,<br>aligning nodes to make them more visually appealing, or to make them go around come cluster of nodes - is a huge waste of time, and quite a distraction.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>While I continue testing <a href=\"https://rete.js.org/#/examples/basic\">Rete.js</a>,<br>and now <a href=\"https://jerosoler.github.io/Drawflow/\">Dataflow</a>...</p>\n  <p>Given the complexity on the visual programming language implementation end,<br>and the potential readability or lost variable issues...</p>\n  <p>It seem to me that the first principle of Visual Programming,<br>should be Smartphones and Tablets first.</p>\n  <p>And here <a href=\"https://js.cytoscape.org/\">Cytoscape.js</a> maybe a better visualization library,<br>as it serves as a map and has automated layout, and the library is complete very little programming is required here.</p>\n  <p>Once a node which here is more abstract, is clicked,<br>then the smartphone will enter a web-page for that node, perhaps even open it in a new tab.</p>\n  <p>All the operations will be performed by a wizard, or a step by step interface,<br>where if someone is trying to add a new node, the page will just list all the available nodes with just standard web technologies.</p>\n  <p>The cytoscape map is a map of flows within the program,<br>they are simple and readable.</p>\n  <p>The node configuration values, all the wires that create an unreadable mess,<br>are replaced with values that are injected into the entire flow control stream.</p>\n  <p>When the program is ran, all the unused values are automatically removed,<br>but creating a verbose linter is a great option too.</p>\n  <p>It will complain that, \"Hey, you have a song name in the flow control stream,<br>but the last time you used it was in the play node, do you want me to remove it from the stream at that point?\"</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Finally, does this fix a problem that people actually have,<br>yes, it shows the flow control of programs graphically.</p>\n  <p>And allows even the novice user, to inject variables into the stream,<br>such as email by asking \"What is your email Address\".</p>\n  <p>And then it allows to use that value later on in the flow control stream,<br>or branching streams, in an alert when computer running out of disk-space or when water detected in the basement node.</p>\n  <p>Here there is room for a node to suggest to the user what it needs,<br>and perhaps even go as far as to offer injecting an input node that asks for email.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Visual Programming is a great idea,<br>but this does not mean, we need to create visual nodes with little input boxes and property sockets.</p>\n  <p>Though it does require that we need to think in streams or flows, and nodes,<br>so that the end result is just bunch of easy to comprehend boxes (or nodes) connected together.</p>\n  <p>Visual Programming just means,<br>that we have to help the user see how the entire program flows.</p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In a way Visual programming is new,<br>and hardly anyone has a clue.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It does not come with a guarantee,<br>that is the biggest problem I see.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In the world of programming,<br>which is a loving, and funny, and wonderfully challenging world.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There is this huge question,<br>and even a huge-er problem.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The question is:<br>\"Does your program fix problems that people actually have?\"</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the huge-er problem, is,<br>that everything is broken.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Phone are missing functionality, operating systems keep crashing,<br>new products need firmware upgrades...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And if you are thrifty or cheap,<br><a href=\"https://youtu.be/uhyM-bhzFsI?t=674\">hackers have access to a detailed map of your home</a>.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So what does a visual programming language fix?<br>and is it really broken?</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The file structure of a program,<br>does not represent what the program does.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Visual programming languages,<br>can create maps of the program flow.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And if we sprinkle in <a href=\"https://yeoman.io/authoring/\">yeoman templates</a>,<br>we can eat the cake and have the files properly structured too.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Is it a problem people have,<br>yeah, programmers have to jump hoops to bridge concepts.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here is an <a href=\"https://rete.js.org/#/docs/controls\">example of a confusing adapter in Rete.js</a>,<br>that is needed to connect an input box to the node in the programming language.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It makes code neat, it makes sense,<br>but it also crushes Rete.js programs under their own weight and non-portable code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There is potential here to create a nicer front-end,<br>but unless it comes from the developer then things will get proken pretty soon.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\"><a href=\"https://nobackend.org/dreamcode.html\">A really neat example of pretty code, is Dream Code</a>,<br><a href=\"https://www.youtube.com/watch?v=TRKRg1O3H0s\">but the world took a completely different path than this creating even more complexity</a>.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then the pink elephant that nobody talks about,<br>the web is about text, and maybe navigation maps, not really about connecting boxes together.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And beyond that you need a team of developers to create a visual programming language in a reasonable stretch of time,<br>and you may need multiple and unique prototypes to get it right.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Even if you request that everything works exactly like Blender's Geometry Nodes,<br>there are no guarantees here, everything is new, and you may end up trying to fix problems that people don't have, anyway.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The web has a wisdom about it self,<br>for one, when a program is written correctly...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In as little as one hour,<br>it will already work on big and small screens.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There is no guarantee that visual programming on a phone,<br>will be fixing the problems that people actually have.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">All the screen pinching,<br>and messing around with little wires...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And trying to connect an output of some math node that is literally two feet away on a smartphone,<br>seems like trouble, and quite a development risk to take.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is a pretty terrible thing to receive a fully functional program after a some months,<br>and then end up not using it for anything.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Imagine hiring a team of developers,<br>and the program just can't work on a little screen, or can't really help anybody with anything.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The pink elephant,<br>is a mean creature.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The big problem with visual programming,<br>is passing information to nodes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You may have a play song or sound node,<br>and then you want the user to pick what sound to play.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So the play sound node is just a beautiful square box, neat and simple,<br>and it is part of a reasonably readable chain of actions.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">For example open window, let user pick song, verify something, or make a song purchase,<br>and then you arrive at he play song/sound node and now there is trouble.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because you have to drag something from pick a song node,<br>to play a song node, and after a while you have all these wires everywhere.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And no making the wires of the nodes that are not in the view-port transparent,<br>does not help, because we have a mess here, it is a mess.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We tried to escape from a mess of files,<br>of from the mess of arbitrary GraphQL queries with random data quota, and we just created a mess of wires.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And no you can't just group program functions together in to a single node,<br>because the input of that node will still require the wires.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Visual Programming the way we have it today,<br>does not yet fix much.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the elephant is not the only animal in the room,<br>I don't know what animal this is, but it has to do with time travel.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because a programmer, should be allowed to create a node,<br>in behavior description only.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the visual programming language, will complain,<br>that he program cannot run because this node does not yet exist.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That the programmer has to create it,<br>and that the created node must pass the behavior test.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">For example, we say we want an UPPERCASE node,<br>that makes all the letters upercase.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And we describe that, the test is to fail until,<br>the word 'cat' (in lowercase) comes out of the node in uppercase.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is a simple test, and a simple mechanism,<br>that allows the creation of large programs, that are yet to be programmed.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There can be a bounty back-end where programmers will get bounties,<br>for programming those nodes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here the developer or a clever company armed with this program,<br>will watch it bubble up into reality.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">At the very least, the programmer will get a decent todo list,<br>and the project lead, perhaps a reasonable time estimate.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">To add insult to injury,<br>these wire based programs, can sometimes branch creating large trees.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here there maybe a large reuse of variables,<br>as the program takes different routes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And now we triple, or quintuple,<br>the number of wires.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here, trying to fix a quirk that potentially exists on multiple unreadable branches,<br>makes visual programming a real problem, and the whole effort becomes pointless.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And I just want to throw this one last thing in there,<br>aligning nodes to make them more visually appealing, or to make them go around come cluster of nodes - is a huge waste of time, and quite a distraction.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">While I continue testing <a href=\"https://rete.js.org/#/examples/basic\">Rete.js</a>,<br>and now <a href=\"https://jerosoler.github.io/Drawflow/\">Dataflow</a>...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Given the complexity on the visual programming language implementation end,<br>and the potential readability or lost variable issues...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It seem to me that the first principle of Visual Programming,<br>should be Smartphones and Tablets first.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And here <a href=\"https://js.cytoscape.org/\">Cytoscape.js</a> maybe a better visualization library,<br>as it serves as a map and has automated layout, and the library is complete very little programming is required here.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Once a node which here is more abstract, is clicked,<br>then the smartphone will enter a web-page for that node, perhaps even open it in a new tab.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">All the operations will be performed by a wizard, or a step by step interface,<br>where if someone is trying to add a new node, the page will just list all the available nodes with just standard web technologies.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The cytoscape map is a map of flows within the program,<br>they are simple and readable.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The node configuration values, all the wires that create an unreadable mess,<br>are replaced with values that are injected into the entire flow control stream.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When the program is ran, all the unused values are automatically removed,<br>but creating a verbose linter is a great option too.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It will complain that, \"Hey, you have a song name in the flow control stream,<br>but the last time you used it was in the play node, do you want me to remove it from the stream at that point?\"</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Finally, does this fix a problem that people actually have,<br>yes, it shows the flow control of programs graphically.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And allows even the novice user, to inject variables into the stream,<br>such as email by asking \"What is your email Address\".</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then it allows to use that value later on in the flow control stream,<br>or branching streams, in an alert when computer running out of disk-space or when water detected in the basement node.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here there is room for a node to suggest to the user what it needs,<br>and perhaps even go as far as to offer injecting an input node that asks for email.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Visual Programming is a great idea,<br>but this does not mean, we need to create visual nodes with little input boxes and property sockets.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Though it does require that we need to think in streams or flows, and nodes,<br>so that the end result is just bunch of easy to comprehend boxes (or nodes) connected together.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Visual Programming just means,<br>that we have to help the user see how the entire program flows.</div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">In a way Visual programming is new,<br>and hardly anyone has a clue.</div>\n  <div class=\"paragraph\">It does not come with a guarantee,<br>that is the biggest problem I see.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">In the world of programming,<br>which is a loving, and funny, and wonderfully challenging world.</div>\n  <div class=\"paragraph\">There is this huge question,<br>and even a huge-er problem.</div>\n  <div class=\"paragraph\">The question is:<br>\"Does your program fix problems that people actually have?\"</div>\n  <div class=\"paragraph\">And the huge-er problem, is,<br>that everything is broken.</div>\n  <div class=\"paragraph\">Phone are missing functionality, operating systems keep crashing,<br>new products need firmware upgrades...</div>\n  <div class=\"paragraph\">And if you are thrifty or cheap,<br><span>hackers have access to a detailed map of your home<sup>[1]</sup></span>.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">So what does a visual programming language fix?<br>and is it really broken?</div>\n  <div class=\"paragraph\">The file structure of a program,<br>does not represent what the program does.</div>\n  <div class=\"paragraph\">Visual programming languages,<br>can create maps of the program flow.</div>\n  <div class=\"paragraph\">And if we sprinkle in <span>yeoman templates<sup>[2]</sup></span>,<br>we can eat the cake and have the files properly structured too.</div>\n  <div class=\"paragraph\">Is it a problem people have,<br>yeah, programmers have to jump hoops to bridge concepts.</div>\n  <div class=\"paragraph\">Here is an <span>example of a confusing adapter in Rete.js<sup>[3]</sup></span>,<br>that is needed to connect an input box to the node in the programming language.</div>\n  <div class=\"paragraph\">It makes code neat, it makes sense,<br>but it also crushes Rete.js programs under their own weight and non-portable code.</div>\n  <div class=\"paragraph\">There is potential here to create a nicer front-end,<br>but unless it comes from the developer then things will get proken pretty soon.</div>\n  <div class=\"paragraph\"><span>A really neat example of pretty code, is Dream Code<sup>[4]</sup></span>,<br><span>but the world took a completely different path than this creating even more complexity<sup>[5]</sup></span>.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And then the pink elephant that nobody talks about,<br>the web is about text, and maybe navigation maps, not really about connecting boxes together.</div>\n  <div class=\"paragraph\">And beyond that you need a team of developers to create a visual programming language in a reasonable stretch of time,<br>and you may need multiple and unique prototypes to get it right.</div>\n  <div class=\"paragraph\">Even if you request that everything works exactly like Blender's Geometry Nodes,<br>there are no guarantees here, everything is new, and you may end up trying to fix problems that people don't have, anyway.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The web has a wisdom about it self,<br>for one, when a program is written correctly...</div>\n  <div class=\"paragraph\">In as little as one hour,<br>it will already work on big and small screens.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">There is no guarantee that visual programming on a phone,<br>will be fixing the problems that people actually have.</div>\n  <div class=\"paragraph\">All the screen pinching,<br>and messing around with little wires...</div>\n  <div class=\"paragraph\">And trying to connect an output of some math node that is literally two feet away on a smartphone,<br>seems like trouble, and quite a development risk to take.</div>\n  <div class=\"paragraph\">It is a pretty terrible thing to receive a fully functional program after a some months,<br>and then end up not using it for anything.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Imagine hiring a team of developers,<br>and the program just can't work on a little screen, or can't really help anybody with anything.</div>\n  <div class=\"paragraph\">The pink elephant,<br>is a mean creature.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The big problem with visual programming,<br>is passing information to nodes.</div>\n  <div class=\"paragraph\">You may have a play song or sound node,<br>and then you want the user to pick what sound to play.</div>\n  <div class=\"paragraph\">So the play sound node is just a beautiful square box, neat and simple,<br>and it is part of a reasonably readable chain of actions.</div>\n  <div class=\"paragraph\">For example open window, let user pick song, verify something, or make a song purchase,<br>and then you arrive at he play song/sound node and now there is trouble.</div>\n  <div class=\"paragraph\">Because you have to drag something from pick a song node,<br>to play a song node, and after a while you have all these wires everywhere.</div>\n  <div class=\"paragraph\">And no making the wires of the nodes that are not in the view-port transparent,<br>does not help, because we have a mess here, it is a mess.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">We tried to escape from a mess of files,<br>of from the mess of arbitrary GraphQL queries with random data quota, and we just created a mess of wires.</div>\n  <div class=\"paragraph\">And no you can't just group program functions together in to a single node,<br>because the input of that node will still require the wires.</div>\n  <div class=\"paragraph\">Visual Programming the way we have it today,<br>does not yet fix much.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And the elephant is not the only animal in the room,<br>I don't know what animal this is, but it has to do with time travel.</div>\n  <div class=\"paragraph\">Because a programmer, should be allowed to create a node,<br>in behavior description only.</div>\n  <div class=\"paragraph\">And the visual programming language, will complain,<br>that he program cannot run because this node does not yet exist.</div>\n  <div class=\"paragraph\">That the programmer has to create it,<br>and that the created node must pass the behavior test.</div>\n  <div class=\"paragraph\">For example, we say we want an UPPERCASE node,<br>that makes all the letters upercase.</div>\n  <div class=\"paragraph\">And we describe that, the test is to fail until,<br>the word 'cat' (in lowercase) comes out of the node in uppercase.</div>\n  <div class=\"paragraph\">It is a simple test, and a simple mechanism,<br>that allows the creation of large programs, that are yet to be programmed.</div>\n  <div class=\"paragraph\">There can be a bounty back-end where programmers will get bounties,<br>for programming those nodes.</div>\n  <div class=\"paragraph\">Here the developer or a clever company armed with this program,<br>will watch it bubble up into reality.</div>\n  <div class=\"paragraph\">At the very least, the programmer will get a decent todo list,<br>and the project lead, perhaps a reasonable time estimate.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">To add insult to injury,<br>these wire based programs, can sometimes branch creating large trees.</div>\n  <div class=\"paragraph\">Here there maybe a large reuse of variables,<br>as the program takes different routes.</div>\n  <div class=\"paragraph\">And now we triple, or quintuple,<br>the number of wires.</div>\n  <div class=\"paragraph\">Here, trying to fix a quirk that potentially exists on multiple unreadable branches,<br>makes visual programming a real problem, and the whole effort becomes pointless.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And I just want to throw this one last thing in there,<br>aligning nodes to make them more visually appealing, or to make them go around come cluster of nodes - is a huge waste of time, and quite a distraction.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">While I continue testing <span>Rete.js<sup>[6]</sup></span>,<br>and now <span>Dataflow<sup>[7]</sup></span>...</div>\n  <div class=\"paragraph\">Given the complexity on the visual programming language implementation end,<br>and the potential readability or lost variable issues...</div>\n  <div class=\"paragraph\">It seem to me that the first principle of Visual Programming,<br>should be Smartphones and Tablets first.</div>\n  <div class=\"paragraph\">And here <span>Cytoscape.js<sup>[8]</sup></span> maybe a better visualization library,<br>as it serves as a map and has automated layout, and the library is complete very little programming is required here.</div>\n  <div class=\"paragraph\">Once a node which here is more abstract, is clicked,<br>then the smartphone will enter a web-page for that node, perhaps even open it in a new tab.</div>\n  <div class=\"paragraph\">All the operations will be performed by a wizard, or a step by step interface,<br>where if someone is trying to add a new node, the page will just list all the available nodes with just standard web technologies.</div>\n  <div class=\"paragraph\">The cytoscape map is a map of flows within the program,<br>they are simple and readable.</div>\n  <div class=\"paragraph\">The node configuration values, all the wires that create an unreadable mess,<br>are replaced with values that are injected into the entire flow control stream.</div>\n  <div class=\"paragraph\">When the program is ran, all the unused values are automatically removed,<br>but creating a verbose linter is a great option too.</div>\n  <div class=\"paragraph\">It will complain that, \"Hey, you have a song name in the flow control stream,<br>but the last time you used it was in the play node, do you want me to remove it from the stream at that point?\"</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Finally, does this fix a problem that people actually have,<br>yes, it shows the flow control of programs graphically.</div>\n  <div class=\"paragraph\">And allows even the novice user, to inject variables into the stream,<br>such as email by asking \"What is your email Address\".</div>\n  <div class=\"paragraph\">And then it allows to use that value later on in the flow control stream,<br>or branching streams, in an alert when computer running out of disk-space or when water detected in the basement node.</div>\n  <div class=\"paragraph\">Here there is room for a node to suggest to the user what it needs,<br>and perhaps even go as far as to offer injecting an input node that asks for email.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Visual Programming is a great idea,<br>but this does not mean, we need to create visual nodes with little input boxes and property sockets.</div>\n  <div class=\"paragraph\">Though it does require that we need to think in streams or flows, and nodes,<br>so that the end result is just bunch of easy to comprehend boxes (or nodes) connected together.</div>\n  <div class=\"paragraph\">Visual Programming just means,<br>that we have to help the user see how the entire program flows.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://youtu.be/uhyM-bhzFsI?t=674</div>\n  <div>[2]: https://yeoman.io/authoring/</div>\n  <div>[3]: https://rete.js.org/#/docs/controls</div>\n  <div>[4]: https://nobackend.org/dreamcode.html</div>\n  <div>[5]: https://www.youtube.com/watch?v=TRKRg1O3H0s</div>\n  <div>[6]: https://rete.js.org/#/examples/basic</div>\n  <div>[7]: https://jerosoler.github.io/Drawflow/</div>\n  <div>[8]: https://js.cytoscape.org/</div>\n</div>",
  "text": "In a way Visual programming is new,\nand hardly anyone has a clue.\nIt does not come with a guarantee,\nthat is the biggest problem I see.\n\nIn the world of programming,\nwhich is a loving, and funny, and wonderfully challenging world.\nThere is this huge question,\nand even a huge-er problem.\nThe question is:\n\"Does your program fix problems that people actually have?\"\nAnd the huge-er problem, is,\nthat everything is broken.\nPhone are missing functionality, operating systems keep crashing,\nnew products need firmware upgrades...\nAnd if you are thrifty or cheap,\nhackers have access to a detailed map of your home[1].\n\nSo what does a visual programming language fix?\nand is it really broken?\nThe file structure of a program,\ndoes not represent what the program does.\nVisual programming languages,\ncan create maps of the program flow.\nAnd if we sprinkle in yeoman templates[2],\nwe can eat the cake and have the files properly structured too.\nIs it a problem people have,\nyeah, programmers have to jump hoops to bridge concepts.\nHere is an example of a confusing adapter in Rete.js[3],\nthat is needed to connect an input box to the node in the programming language.\nIt makes code neat, it makes sense,\nbut it also crushes Rete.js programs under their own weight and non-portable code.\nThere is potential here to create a nicer front-end,\nbut unless it comes from the developer then things will get proken pretty soon.\nA really neat example of pretty code, is Dream Code[4],\nbut the world took a completely different path than this creating even more complexity[5].\n\nAnd then the pink elephant that nobody talks about,\nthe web is about text, and maybe navigation maps, not really about connecting boxes together.\nAnd beyond that you need a team of developers to create a visual programming language in a reasonable stretch of time,\nand you may need multiple and unique prototypes to get it right.\nEven if you request that everything works exactly like Blender's Geometry Nodes,\nthere are no guarantees here, everything is new, and you may end up trying to fix problems that people don't have, anyway.\n\nThe web has a wisdom about it self,\nfor one, when a program is written correctly...\nIn as little as one hour,\nit will already work on big and small screens.\n\nThere is no guarantee that visual programming on a phone,\nwill be fixing the problems that people actually have.\nAll the screen pinching,\nand messing around with little wires...\nAnd trying to connect an output of some math node that is literally two feet away on a smartphone,\nseems like trouble, and quite a development risk to take.\nIt is a pretty terrible thing to receive a fully functional program after a some months,\nand then end up not using it for anything.\n\nImagine hiring a team of developers,\nand the program just can't work on a little screen, or can't really help anybody with anything.\nThe pink elephant,\nis a mean creature.\n\nThe big problem with visual programming,\nis passing information to nodes.\nYou may have a play song or sound node,\nand then you want the user to pick what sound to play.\nSo the play sound node is just a beautiful square box, neat and simple,\nand it is part of a reasonably readable chain of actions.\nFor example open window, let user pick song, verify something, or make a song purchase,\nand then you arrive at he play song/sound node and now there is trouble.\nBecause you have to drag something from pick a song node,\nto play a song node, and after a while you have all these wires everywhere.\nAnd no making the wires of the nodes that are not in the view-port transparent,\ndoes not help, because we have a mess here, it is a mess.\n\nWe tried to escape from a mess of files,\nof from the mess of arbitrary GraphQL queries with random data quota, and we just created a mess of wires.\nAnd no you can't just group program functions together in to a single node,\nbecause the input of that node will still require the wires.\nVisual Programming the way we have it today,\ndoes not yet fix much.\n\nAnd the elephant is not the only animal in the room,\nI don't know what animal this is, but it has to do with time travel.\nBecause a programmer, should be allowed to create a node,\nin behavior description only.\nAnd the visual programming language, will complain,\nthat he program cannot run because this node does not yet exist.\nThat the programmer has to create it,\nand that the created node must pass the behavior test.\nFor example, we say we want an UPPERCASE node,\nthat makes all the letters upercase.\nAnd we describe that, the test is to fail until,\nthe word 'cat' (in lowercase) comes out of the node in uppercase.\nIt is a simple test, and a simple mechanism,\nthat allows the creation of large programs, that are yet to be programmed.\nThere can be a bounty back-end where programmers will get bounties,\nfor programming those nodes.\nHere the developer or a clever company armed with this program,\nwill watch it bubble up into reality.\nAt the very least, the programmer will get a decent todo list,\nand the project lead, perhaps a reasonable time estimate.\n\nTo add insult to injury,\nthese wire based programs, can sometimes branch creating large trees.\nHere there maybe a large reuse of variables,\nas the program takes different routes.\nAnd now we triple, or quintuple,\nthe number of wires.\nHere, trying to fix a quirk that potentially exists on multiple unreadable branches,\nmakes visual programming a real problem, and the whole effort becomes pointless.\n\nAnd I just want to throw this one last thing in there,\naligning nodes to make them more visually appealing, or to make them go around come cluster of nodes - is a huge waste of time, and quite a distraction.\n\nWhile I continue testing Rete.js[6],\nand now Dataflow[7]...\nGiven the complexity on the visual programming language implementation end,\nand the potential readability or lost variable issues...\nIt seem to me that the first principle of Visual Programming,\nshould be Smartphones and Tablets first.\nAnd here Cytoscape.js[8] maybe a better visualization library,\nas it serves as a map and has automated layout, and the library is complete very little programming is required here.\nOnce a node which here is more abstract, is clicked,\nthen the smartphone will enter a web-page for that node, perhaps even open it in a new tab.\nAll the operations will be performed by a wizard, or a step by step interface,\nwhere if someone is trying to add a new node, the page will just list all the available nodes with just standard web technologies.\nThe cytoscape map is a map of flows within the program,\nthey are simple and readable.\nThe node configuration values, all the wires that create an unreadable mess,\nare replaced with values that are injected into the entire flow control stream.\nWhen the program is ran, all the unused values are automatically removed,\nbut creating a verbose linter is a great option too.\nIt will complain that, \"Hey, you have a song name in the flow control stream,\nbut the last time you used it was in the play node, do you want me to remove it from the stream at that point?\"\n\nFinally, does this fix a problem that people actually have,\nyes, it shows the flow control of programs graphically.\nAnd allows even the novice user, to inject variables into the stream,\nsuch as email by asking \"What is your email Address\".\nAnd then it allows to use that value later on in the flow control stream,\nor branching streams, in an alert when computer running out of disk-space or when water detected in the basement node.\nHere there is room for a node to suggest to the user what it needs,\nand perhaps even go as far as to offer injecting an input node that asks for email.\n\nVisual Programming is a great idea,\nbut this does not mean, we need to create visual nodes with little input boxes and property sockets.\nThough it does require that we need to think in streams or flows, and nodes,\nso that the end result is just bunch of easy to comprehend boxes (or nodes) connected together.\nVisual Programming just means,\nthat we have to help the user see how the entire program flows.\n \nReferences\n[1]: https://youtu.be/uhyM-bhzFsI?t=674\n[2]: https://yeoman.io/authoring/\n[3]: https://rete.js.org/#/docs/controls\n[4]: https://nobackend.org/dreamcode.html\n[5]: https://www.youtube.com/watch?v=TRKRg1O3H0s\n[6]: https://rete.js.org/#/examples/basic\n[7]: https://jerosoler.github.io/Drawflow/\n[8]: https://js.cytoscape.org/",
  "images": [],
  "links": [
    {
      "title": "hackers have access to a detailed map of your home",
      "url": "https://youtu.be/uhyM-bhzFsI?t=674",
      "hostname": "youtu.be"
    },
    {
      "title": "yeoman templates",
      "url": "https://yeoman.io/authoring/",
      "hostname": "yeoman.io"
    },
    {
      "title": "example of a confusing adapter in Rete.js",
      "url": "https://rete.js.org/#/docs/controls",
      "hostname": "rete.js.org"
    },
    {
      "title": "A really neat example of pretty code, is Dream Code",
      "url": "https://nobackend.org/dreamcode.html",
      "hostname": "nobackend.org"
    },
    {
      "title": "but the world took a completely different path than this creating even more complexity",
      "url": "https://www.youtube.com/watch?v=TRKRg1O3H0s",
      "hostname": "www.youtube.com"
    },
    {
      "title": "Rete.js",
      "url": "https://rete.js.org/#/examples/basic",
      "hostname": "rete.js.org"
    },
    {
      "title": "Dataflow",
      "url": "https://jerosoler.github.io/Drawflow/",
      "hostname": "jerosoler.github.io"
    },
    {
      "title": "Cytoscape.js",
      "url": "https://js.cytoscape.org/",
      "hostname": "js.cytoscape.org"
    }
  ]
}