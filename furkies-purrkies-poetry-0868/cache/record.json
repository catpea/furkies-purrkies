{
  "name": "furkies-purrkies-poetry-0868",
  "id": "furkies-purrkies-poetry-0868",
  "title": "Modern Luxury Source Code Editors; Or, Where The Heck, To Put The Darn Source Code?",
  "date": "2022-07-17T01:02:49.880Z",
  "image": "poetry-0868-illustration.jpg",
  "artwork": "https://catpea.com",
  "audio": "poetry-0868.mp3",
  "html": "<div class=\"section\">\n  <p>I think the idea of a programmer will fade away,<br>as it will be replaced by the modern teenager.</p>\n  <p>I think smartphones are already too stupid,<br>and the next big thing is a programmable phone.</p>\n  <p>That is how quickly times are changing,<br>smartphones are a relic.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>I recently discovered that there is something neat,<br>that we can do to hasten this transformation.</p>\n  <p>We have to race to meet the new intellectual,<br>with self guided integrated development environments.</p>\n  <p>No newcomer to programming should ever wonder,<br>where to put the code.</p>\n  <p>The boxes for the code, along with a build button,<br>should already be on the screen.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p><a href=\"https://www.youtube.com/watch?v=GOGru_4z1Vc\">Mr. Vonnegut presented us with the idea that stories have shape</a>,<br>and same is the case for every useful programming pattern.</p>\n  <p>That shape is always very simple,<br>as it is rarely visualized with a friendly GUI.</p>\n  <p>The old school programmer had a terminal,<br>the whippersnappers have electron, the madmen have eclipse.</p>\n  <p>And none of it is friendly, even the modern web based editor,<br>is just a spicy text editor, little more than a 1980’s terminal.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>There are some shapes that do get complex,<br>Object Oriented Programming comes to mind .</p>\n  <p>And same is the case with Aspect Oriented Programming,<br>OOP Mixins, and Multiple Inheritance</p>\n  <p>These would be greatly improved with a specialized editor,<br>but these technologies still fail, no matter the user interface.</p>\n  <p>They create too much complexity,<br>any which way.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>On a much smaller scale the Event Emitter,<br>is incredibly friendly.</p>\n  <p>It is just a listener,<br>and bunch of functions that crunch the data it receives.</p>\n  <p>And Linux command line commands are friendly too,<br>sweet configuration arguments, the input stream is any, and then just the error and output streams.</p>\n  <p>They are similar to an Event Emitter,<br>and in fact node streams are made with the use of the Emitter.</p>\n  <p>I mention modern JavaScript for creation of commands,<br>because of how many places the JavaScript programmer can reach.</p>\n  <p>Linux Command Line, SVG Graphics, Electron Desktop Applications,<br>Web Sites, Web Servers.</p>\n  <p>C or C++ would greatly slow a programmer down,<br>not so with JavaScript.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Finally, I will just describe the shape of an EventEmitter,<br>and I will even throw in unit tests to the mix.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The shape is three columns,<br>underlined by the code editor.</p>\n  <p>In the first column we have<br>an editable list of all the events where user can add more.</p>\n  <p>When we select an event,<br>from the first column.</p>\n  <p>In the second column we get a list of the functions,<br>that process the object the Event Listener receives.</p>\n  <p>And when we click on a function,<br>yes the associated code does appear on the bottom of all three columns.</p>\n  <p>But also the third column will display the unit tests,<br>that are used to check if the function is complete and correct.</p>\n  <p>Three columns, List of Events, list of event functions, and list of function tests,<br>and wherever there is some code to edit, it can be edited in the editor.</p>\n  <p>That is usually the function code,<br>and the unit test code.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>By clicking build a code generator will gather everything up,<br>and create a perfect little module that can be committed to a proper repository.</p>\n  <p>Such a program would be installed on the user’s commuter,<br>so there is no need for servers here.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Aside from being a very neat way,<br>to learn programming, this project comes with a powerful benefit.</p>\n  <p>While the programmer has a useful interface,<br>they get to look at the code generator output.</p>\n  <p>And see how their functions are integrated,<br>into EventEmitters and node modules, or command line applications.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>I think, at first, the new intellectual, the programmer,<br>will end up viewing that code the way we view obfuscated or transpiled code.</p>\n  <p>They will eventually get to know how it all works,<br>but it won’t be a priority.</p>\n  <p>Precisely because these luxury code editors,<br>help the programmer focus on code, and not boilerplate.</p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I think the idea of a programmer will fade away,<br>as it will be replaced by the modern teenager.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I think smartphones are already too stupid,<br>and the next big thing is a programmable phone.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That is how quickly times are changing,<br>smartphones are a relic.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I recently discovered that there is something neat,<br>that we can do to hasten this transformation.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We have to race to meet the new intellectual,<br>with self guided integrated development environments.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">No newcomer to programming should ever wonder,<br>where to put the code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The boxes for the code, along with a build button,<br>should already be on the screen.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\"><a href=\"https://www.youtube.com/watch?v=GOGru_4z1Vc\">Mr. Vonnegut presented us with the idea that stories have shape</a>,<br>and same is the case for every useful programming pattern.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That shape is always very simple,<br>as it is rarely visualized with a friendly GUI.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The old school programmer had a terminal,<br>the whippersnappers have electron, the madmen have eclipse.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And none of it is friendly, even the modern web based editor,<br>is just a spicy text editor, little more than a 1980’s terminal.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There are some shapes that do get complex,<br>Object Oriented Programming comes to mind .</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And same is the case with Aspect Oriented Programming,<br>OOP Mixins, and Multiple Inheritance</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">These would be greatly improved with a specialized editor,<br>but these technologies still fail, no matter the user interface.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They create too much complexity,<br>any which way.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">On a much smaller scale the Event Emitter,<br>is incredibly friendly.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is just a listener,<br>and bunch of functions that crunch the data it receives.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And Linux command line commands are friendly too,<br>sweet configuration arguments, the input stream is any, and then just the error and output streams.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They are similar to an Event Emitter,<br>and in fact node streams are made with the use of the Emitter.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I mention modern JavaScript for creation of commands,<br>because of how many places the JavaScript programmer can reach.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Linux Command Line, SVG Graphics, Electron Desktop Applications,<br>Web Sites, Web Servers.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">C or C++ would greatly slow a programmer down,<br>not so with JavaScript.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Finally, I will just describe the shape of an EventEmitter,<br>and I will even throw in unit tests to the mix.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The shape is three columns,<br>underlined by the code editor.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In the first column we have<br>an editable list of all the events where user can add more.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When we select an event,<br>from the first column.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In the second column we get a list of the functions,<br>that process the object the Event Listener receives.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And when we click on a function,<br>yes the associated code does appear on the bottom of all three columns.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But also the third column will display the unit tests,<br>that are used to check if the function is complete and correct.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Three columns, List of Events, list of event functions, and list of function tests,<br>and wherever there is some code to edit, it can be edited in the editor.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That is usually the function code,<br>and the unit test code.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">By clicking build a code generator will gather everything up,<br>and create a perfect little module that can be committed to a proper repository.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Such a program would be installed on the user’s commuter,<br>so there is no need for servers here.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Aside from being a very neat way,<br>to learn programming, this project comes with a powerful benefit.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">While the programmer has a useful interface,<br>they get to look at the code generator output.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And see how their functions are integrated,<br>into EventEmitters and node modules, or command line applications.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I think, at first, the new intellectual, the programmer,<br>will end up viewing that code the way we view obfuscated or transpiled code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They will eventually get to know how it all works,<br>but it won’t be a priority.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Precisely because these luxury code editors,<br>help the programmer focus on code, and not boilerplate.</div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">I think the idea of a programmer will fade away,<br>as it will be replaced by the modern teenager.</div>\n  <div class=\"paragraph\">I think smartphones are already too stupid,<br>and the next big thing is a programmable phone.</div>\n  <div class=\"paragraph\">That is how quickly times are changing,<br>smartphones are a relic.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">I recently discovered that there is something neat,<br>that we can do to hasten this transformation.</div>\n  <div class=\"paragraph\">We have to race to meet the new intellectual,<br>with self guided integrated development environments.</div>\n  <div class=\"paragraph\">No newcomer to programming should ever wonder,<br>where to put the code.</div>\n  <div class=\"paragraph\">The boxes for the code, along with a build button,<br>should already be on the screen.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\"><span>Mr. Vonnegut presented us with the idea that stories have shape<sup>[1]</sup></span>,<br>and same is the case for every useful programming pattern.</div>\n  <div class=\"paragraph\">That shape is always very simple,<br>as it is rarely visualized with a friendly GUI.</div>\n  <div class=\"paragraph\">The old school programmer had a terminal,<br>the whippersnappers have electron, the madmen have eclipse.</div>\n  <div class=\"paragraph\">And none of it is friendly, even the modern web based editor,<br>is just a spicy text editor, little more than a 1980’s terminal.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">There are some shapes that do get complex,<br>Object Oriented Programming comes to mind .</div>\n  <div class=\"paragraph\">And same is the case with Aspect Oriented Programming,<br>OOP Mixins, and Multiple Inheritance</div>\n  <div class=\"paragraph\">These would be greatly improved with a specialized editor,<br>but these technologies still fail, no matter the user interface.</div>\n  <div class=\"paragraph\">They create too much complexity,<br>any which way.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">On a much smaller scale the Event Emitter,<br>is incredibly friendly.</div>\n  <div class=\"paragraph\">It is just a listener,<br>and bunch of functions that crunch the data it receives.</div>\n  <div class=\"paragraph\">And Linux command line commands are friendly too,<br>sweet configuration arguments, the input stream is any, and then just the error and output streams.</div>\n  <div class=\"paragraph\">They are similar to an Event Emitter,<br>and in fact node streams are made with the use of the Emitter.</div>\n  <div class=\"paragraph\">I mention modern JavaScript for creation of commands,<br>because of how many places the JavaScript programmer can reach.</div>\n  <div class=\"paragraph\">Linux Command Line, SVG Graphics, Electron Desktop Applications,<br>Web Sites, Web Servers.</div>\n  <div class=\"paragraph\">C or C++ would greatly slow a programmer down,<br>not so with JavaScript.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Finally, I will just describe the shape of an EventEmitter,<br>and I will even throw in unit tests to the mix.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The shape is three columns,<br>underlined by the code editor.</div>\n  <div class=\"paragraph\">In the first column we have<br>an editable list of all the events where user can add more.</div>\n  <div class=\"paragraph\">When we select an event,<br>from the first column.</div>\n  <div class=\"paragraph\">In the second column we get a list of the functions,<br>that process the object the Event Listener receives.</div>\n  <div class=\"paragraph\">And when we click on a function,<br>yes the associated code does appear on the bottom of all three columns.</div>\n  <div class=\"paragraph\">But also the third column will display the unit tests,<br>that are used to check if the function is complete and correct.</div>\n  <div class=\"paragraph\">Three columns, List of Events, list of event functions, and list of function tests,<br>and wherever there is some code to edit, it can be edited in the editor.</div>\n  <div class=\"paragraph\">That is usually the function code,<br>and the unit test code.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">By clicking build a code generator will gather everything up,<br>and create a perfect little module that can be committed to a proper repository.</div>\n  <div class=\"paragraph\">Such a program would be installed on the user’s commuter,<br>so there is no need for servers here.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Aside from being a very neat way,<br>to learn programming, this project comes with a powerful benefit.</div>\n  <div class=\"paragraph\">While the programmer has a useful interface,<br>they get to look at the code generator output.</div>\n  <div class=\"paragraph\">And see how their functions are integrated,<br>into EventEmitters and node modules, or command line applications.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">I think, at first, the new intellectual, the programmer,<br>will end up viewing that code the way we view obfuscated or transpiled code.</div>\n  <div class=\"paragraph\">They will eventually get to know how it all works,<br>but it won’t be a priority.</div>\n  <div class=\"paragraph\">Precisely because these luxury code editors,<br>help the programmer focus on code, and not boilerplate.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://www.youtube.com/watch?v=GOGru_4z1Vc</div>\n</div>",
  "text": "I think the idea of a programmer will fade away,\nas it will be replaced by the modern teenager.\nI think smartphones are already too stupid,\nand the next big thing is a programmable phone.\nThat is how quickly times are changing,\nsmartphones are a relic.\n\nI recently discovered that there is something neat,\nthat we can do to hasten this transformation.\nWe have to race to meet the new intellectual,\nwith self guided integrated development environments.\nNo newcomer to programming should ever wonder,\nwhere to put the code.\nThe boxes for the code, along with a build button,\nshould already be on the screen.\n\nMr. Vonnegut presented us with the idea that stories have shape[1],\nand same is the case for every useful programming pattern.\nThat shape is always very simple,\nas it is rarely visualized with a friendly GUI.\nThe old school programmer had a terminal,\nthe whippersnappers have electron, the madmen have eclipse.\nAnd none of it is friendly, even the modern web based editor,\nis just a spicy text editor, little more than a 1980’s terminal.\n\nThere are some shapes that do get complex,\nObject Oriented Programming comes to mind .\nAnd same is the case with Aspect Oriented Programming,\nOOP Mixins, and Multiple Inheritance\nThese would be greatly improved with a specialized editor,\nbut these technologies still fail, no matter the user interface.\nThey create too much complexity,\nany which way.\n\nOn a much smaller scale the Event Emitter,\nis incredibly friendly.\nIt is just a listener,\nand bunch of functions that crunch the data it receives.\nAnd Linux command line commands are friendly too,\nsweet configuration arguments, the input stream is any, and then just the error and output streams.\nThey are similar to an Event Emitter,\nand in fact node streams are made with the use of the Emitter.\nI mention modern JavaScript for creation of commands,\nbecause of how many places the JavaScript programmer can reach.\nLinux Command Line, SVG Graphics, Electron Desktop Applications,\nWeb Sites, Web Servers.\nC or C++ would greatly slow a programmer down,\nnot so with JavaScript.\n\nFinally, I will just describe the shape of an EventEmitter,\nand I will even throw in unit tests to the mix.\n\nThe shape is three columns,\nunderlined by the code editor.\nIn the first column we have\nan editable list of all the events where user can add more.\nWhen we select an event,\nfrom the first column.\nIn the second column we get a list of the functions,\nthat process the object the Event Listener receives.\nAnd when we click on a function,\nyes the associated code does appear on the bottom of all three columns.\nBut also the third column will display the unit tests,\nthat are used to check if the function is complete and correct.\nThree columns, List of Events, list of event functions, and list of function tests,\nand wherever there is some code to edit, it can be edited in the editor.\nThat is usually the function code,\nand the unit test code.\n\nBy clicking build a code generator will gather everything up,\nand create a perfect little module that can be committed to a proper repository.\nSuch a program would be installed on the user’s commuter,\nso there is no need for servers here.\n\nAside from being a very neat way,\nto learn programming, this project comes with a powerful benefit.\nWhile the programmer has a useful interface,\nthey get to look at the code generator output.\nAnd see how their functions are integrated,\ninto EventEmitters and node modules, or command line applications.\n\nI think, at first, the new intellectual, the programmer,\nwill end up viewing that code the way we view obfuscated or transpiled code.\nThey will eventually get to know how it all works,\nbut it won’t be a priority.\nPrecisely because these luxury code editors,\nhelp the programmer focus on code, and not boilerplate.\n \nReferences\n[1]: https://www.youtube.com/watch?v=GOGru_4z1Vc",
  "images": [],
  "links": [
    {
      "title": "Mr. Vonnegut presented us with the idea that stories have shape",
      "url": "https://www.youtube.com/watch?v=GOGru_4z1Vc",
      "hostname": "www.youtube.com"
    }
  ]
}