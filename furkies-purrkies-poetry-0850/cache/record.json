{
  "name": "furkies-purrkies-poetry-0850",
  "id": "furkies-purrkies-poetry-0850",
  "title": "Programming By Describing Actions In Plain Text",
  "date": "2022-06-29T01:05:07.134Z",
  "image": "poetry-0850-illustration.jpg",
  "artwork": "https://unsplash.com/photos/8A6nVEEYulQ",
  "artworks": [
    "https://unsplash.com/photos/O2MdroNurVw"
  ],
  "audio": "poetry-0850.mp3",
  "guid": "d9777465-8218-4df3-b13e-da92c3b0b49b",
  "html": "<div class=\"section\">\n  <p>I think all people can write computer programs,<br>it is just that programming languages are too simple and raw.</p>\n  <p>This approach uses Flow Based programming,<br>prefixed by an Event Listener.</p>\n  <p>A really good example of flow based programming and processing is your mouse...<br>when you move it across a web page with a Mouse Event Listener.</p>\n  <p>Here, you are sending a lot of XY coordinates, to the Mouse Move Event Listener,<br>you can process them by filtering and transforming the data in the stream.</p>\n  <p>You could filter out all data, until the mouse is pressed,<br>and then let the user draw, by placing a trail of colorful pixels as those X,Y coordinates.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Allow me to describe it,<br>couple more times.</p>\n  <p>First you have a program that drops all X,Y coordinate objects,<br>unless the mouse also reports being pressed.</p>\n  <p>And then you have a second program on the stream,<br>and it just picks a random color for a pixel.</p>\n  <p>You don’t have to check if a mouse is pressed,<br>because none of the packets when a mouse isn’t pressed reach here.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>We have two programs sitting on top of this stream,<br>a packet dropper or filter, and pixel painter or random color pen.</p>\n  <p>And the stream it self starts with an Even Listener,<br>that gets the X,Y coordinates from the mouse.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The big deal about this is that this can be visually represented,<br>with a circle for even listener, line for the stream of X,Y coordinates...</p>\n  <p>And a couple of squares,<br>representing the filter and the pen.</p>\n  <p>More than that, even before the graphical representation,<br>this can be easily spelled out in text.</p>\n  <p>And in fact this program should be first structured,<br>in a plain text document.</p>\n  <p>The document can be fed into Cytoscape.js based,<br>visual program representational graph.</p>\n  <p>The text it self, is just title for name of the program,<br>declaration of needed variables such as useRand omColorPen = true...</p>\n  <p>And paragraphs of text separated by space,<br>here if there is a branching statement.</p>\n  <p>The paragraph may describe to what listener the stream should flow,<br>or just specify the name.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Finally, it is very important, that free text is used to describe what happens on the line,<br>what the filter is doing, or what the pen should do.</p>\n  <p>Because this allows describing program functionality that does not yet exist,<br>exactly like in Behavior Driven development.</p>\n  <p>In the end each paragraph of text,<br>is sent through a code generator.</p>\n  <p>Where program chunks that already exist,<br>the user will connect them to the paragraph.</p>\n  <p>Where functionality calls for programmers,<br>the code generator will generate Unit Tests and post a bounty.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The stream based approach as I have described here,<br>is not just for efficiency but for readability by examining large visual program maps.</p>\n  <p>The shocking part, of describing code with paragraphs of text,<br>is not about <a href=\"https://en.wikipedia.org/wiki/Literate_programming\">Literate Programming</a> but rather mobile phones.</p>\n  <p>This environment allows for serious programming,<br>by just typing text into boxes.</p>\n  <p>Here the developer begins to create a valuable description of a program, already on day one,<br>and simple search will list all the existing modules related to the paragraph the developer is describing.</p>\n  <p>All you need to start writing programs is a slightly enriched text box, and just as soon as you start typing;<br>a map of the streams and branches will snap into existence.</p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I think all people can write computer programs,<br>it is just that programming languages are too simple and raw.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This approach uses Flow Based programming,<br>prefixed by an Event Listener.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A really good example of flow based programming and processing is your mouse...<br>when you move it across a web page with a Mouse Event Listener.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here, you are sending a lot of XY coordinates, to the Mouse Move Event Listener,<br>you can process them by filtering and transforming the data in the stream.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You could filter out all data, until the mouse is pressed,<br>and then let the user draw, by placing a trail of colorful pixels as those X,Y coordinates.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Allow me to describe it,<br>couple more times.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">First you have a program that drops all X,Y coordinate objects,<br>unless the mouse also reports being pressed.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then you have a second program on the stream,<br>and it just picks a random color for a pixel.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You don’t have to check if a mouse is pressed,<br>because none of the packets when a mouse isn’t pressed reach here.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We have two programs sitting on top of this stream,<br>a packet dropper or filter, and pixel painter or random color pen.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the stream it self starts with an Even Listener,<br>that gets the X,Y coordinates from the mouse.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The big deal about this is that this can be visually represented,<br>with a circle for even listener, line for the stream of X,Y coordinates...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And a couple of squares,<br>representing the filter and the pen.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">More than that, even before the graphical representation,<br>this can be easily spelled out in text.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And in fact this program should be first structured,<br>in a plain text document.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The document can be fed into Cytoscape.js based,<br>visual program representational graph.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The text it self, is just title for name of the program,<br>declaration of needed variables such as useRand omColorPen = true...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And paragraphs of text separated by space,<br>here if there is a branching statement.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The paragraph may describe to what listener the stream should flow,<br>or just specify the name.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Finally, it is very important, that free text is used to describe what happens on the line,<br>what the filter is doing, or what the pen should do.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because this allows describing program functionality that does not yet exist,<br>exactly like in Behavior Driven development.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In the end each paragraph of text,<br>is sent through a code generator.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Where program chunks that already exist,<br>the user will connect them to the paragraph.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Where functionality calls for programmers,<br>the code generator will generate Unit Tests and post a bounty.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The stream based approach as I have described here,<br>is not just for efficiency but for readability by examining large visual program maps.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The shocking part, of describing code with paragraphs of text,<br>is not about <a href=\"https://en.wikipedia.org/wiki/Literate_programming\">Literate Programming</a> but rather mobile phones.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This environment allows for serious programming,<br>by just typing text into boxes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here the developer begins to create a valuable description of a program, already on day one,<br>and simple search will list all the existing modules related to the paragraph the developer is describing.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">All you need to start writing programs is a slightly enriched text box, and just as soon as you start typing;<br>a map of the streams and branches will snap into existence.</div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">I think all people can write computer programs,<br>it is just that programming languages are too simple and raw.</div>\n  <div class=\"paragraph\">This approach uses Flow Based programming,<br>prefixed by an Event Listener.</div>\n  <div class=\"paragraph\">A really good example of flow based programming and processing is your mouse...<br>when you move it across a web page with a Mouse Event Listener.</div>\n  <div class=\"paragraph\">Here, you are sending a lot of XY coordinates, to the Mouse Move Event Listener,<br>you can process them by filtering and transforming the data in the stream.</div>\n  <div class=\"paragraph\">You could filter out all data, until the mouse is pressed,<br>and then let the user draw, by placing a trail of colorful pixels as those X,Y coordinates.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Allow me to describe it,<br>couple more times.</div>\n  <div class=\"paragraph\">First you have a program that drops all X,Y coordinate objects,<br>unless the mouse also reports being pressed.</div>\n  <div class=\"paragraph\">And then you have a second program on the stream,<br>and it just picks a random color for a pixel.</div>\n  <div class=\"paragraph\">You don’t have to check if a mouse is pressed,<br>because none of the packets when a mouse isn’t pressed reach here.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">We have two programs sitting on top of this stream,<br>a packet dropper or filter, and pixel painter or random color pen.</div>\n  <div class=\"paragraph\">And the stream it self starts with an Even Listener,<br>that gets the X,Y coordinates from the mouse.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The big deal about this is that this can be visually represented,<br>with a circle for even listener, line for the stream of X,Y coordinates...</div>\n  <div class=\"paragraph\">And a couple of squares,<br>representing the filter and the pen.</div>\n  <div class=\"paragraph\">More than that, even before the graphical representation,<br>this can be easily spelled out in text.</div>\n  <div class=\"paragraph\">And in fact this program should be first structured,<br>in a plain text document.</div>\n  <div class=\"paragraph\">The document can be fed into Cytoscape.js based,<br>visual program representational graph.</div>\n  <div class=\"paragraph\">The text it self, is just title for name of the program,<br>declaration of needed variables such as useRand omColorPen = true...</div>\n  <div class=\"paragraph\">And paragraphs of text separated by space,<br>here if there is a branching statement.</div>\n  <div class=\"paragraph\">The paragraph may describe to what listener the stream should flow,<br>or just specify the name.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Finally, it is very important, that free text is used to describe what happens on the line,<br>what the filter is doing, or what the pen should do.</div>\n  <div class=\"paragraph\">Because this allows describing program functionality that does not yet exist,<br>exactly like in Behavior Driven development.</div>\n  <div class=\"paragraph\">In the end each paragraph of text,<br>is sent through a code generator.</div>\n  <div class=\"paragraph\">Where program chunks that already exist,<br>the user will connect them to the paragraph.</div>\n  <div class=\"paragraph\">Where functionality calls for programmers,<br>the code generator will generate Unit Tests and post a bounty.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The stream based approach as I have described here,<br>is not just for efficiency but for readability by examining large visual program maps.</div>\n  <div class=\"paragraph\">The shocking part, of describing code with paragraphs of text,<br>is not about <span>Literate Programming<sup>[1]</sup></span> but rather mobile phones.</div>\n  <div class=\"paragraph\">This environment allows for serious programming,<br>by just typing text into boxes.</div>\n  <div class=\"paragraph\">Here the developer begins to create a valuable description of a program, already on day one,<br>and simple search will list all the existing modules related to the paragraph the developer is describing.</div>\n  <div class=\"paragraph\">All you need to start writing programs is a slightly enriched text box, and just as soon as you start typing;<br>a map of the streams and branches will snap into existence.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://en.wikipedia.org/wiki/Literate_programming</div>\n</div>",
  "text": "I think all people can write computer programs,\nit is just that programming languages are too simple and raw.\nThis approach uses Flow Based programming,\nprefixed by an Event Listener.\nA really good example of flow based programming and processing is your mouse...\nwhen you move it across a web page with a Mouse Event Listener.\nHere, you are sending a lot of XY coordinates, to the Mouse Move Event Listener,\nyou can process them by filtering and transforming the data in the stream.\nYou could filter out all data, until the mouse is pressed,\nand then let the user draw, by placing a trail of colorful pixels as those X,Y coordinates.\n\nAllow me to describe it,\ncouple more times.\nFirst you have a program that drops all X,Y coordinate objects,\nunless the mouse also reports being pressed.\nAnd then you have a second program on the stream,\nand it just picks a random color for a pixel.\nYou don’t have to check if a mouse is pressed,\nbecause none of the packets when a mouse isn’t pressed reach here.\n\nWe have two programs sitting on top of this stream,\na packet dropper or filter, and pixel painter or random color pen.\nAnd the stream it self starts with an Even Listener,\nthat gets the X,Y coordinates from the mouse.\n\nThe big deal about this is that this can be visually represented,\nwith a circle for even listener, line for the stream of X,Y coordinates...\nAnd a couple of squares,\nrepresenting the filter and the pen.\nMore than that, even before the graphical representation,\nthis can be easily spelled out in text.\nAnd in fact this program should be first structured,\nin a plain text document.\nThe document can be fed into Cytoscape.js based,\nvisual program representational graph.\nThe text it self, is just title for name of the program,\ndeclaration of needed variables such as useRand omColorPen = true...\nAnd paragraphs of text separated by space,\nhere if there is a branching statement.\nThe paragraph may describe to what listener the stream should flow,\nor just specify the name.\n\nFinally, it is very important, that free text is used to describe what happens on the line,\nwhat the filter is doing, or what the pen should do.\nBecause this allows describing program functionality that does not yet exist,\nexactly like in Behavior Driven development.\nIn the end each paragraph of text,\nis sent through a code generator.\nWhere program chunks that already exist,\nthe user will connect them to the paragraph.\nWhere functionality calls for programmers,\nthe code generator will generate Unit Tests and post a bounty.\n\nThe stream based approach as I have described here,\nis not just for efficiency but for readability by examining large visual program maps.\nThe shocking part, of describing code with paragraphs of text,\nis not about Literate Programming[1] but rather mobile phones.\nThis environment allows for serious programming,\nby just typing text into boxes.\nHere the developer begins to create a valuable description of a program, already on day one,\nand simple search will list all the existing modules related to the paragraph the developer is describing.\nAll you need to start writing programs is a slightly enriched text box, and just as soon as you start typing;\na map of the streams and branches will snap into existence.\n \nReferences\n[1]: https://en.wikipedia.org/wiki/Literate_programming",
  "images": [],
  "links": [
    {
      "title": "Literate Programming",
      "url": "https://en.wikipedia.org/wiki/Literate_programming",
      "hostname": "en.wikipedia.org"
    }
  ]
}