{
  "name": "furkies-purrkies-poetry-0921",
  "id": "furkies-purrkies-poetry-0921",
  "guid": "47129ed7-7edb-40ff-a343-474c372b391d",
  "title": "Zero Is A Number: The JavaScript For Loop And A Fence Post Problem",
  "date": "2022-09-08T00:55:17.814Z",
  "image": "poetry-0921-illustration.jpg",
  "artwork": "https://unsplash.com/photos/DapP9j2DJMQ",
  "audio": "poetry-0921.mp3",
  "html": "<div class=\"section\">\n  <p>I must admit I welcome the Fence Post problem,<br>and I think of zero as a proper number we should all embrace.</p>\n  <p>It is like a hug,<br>from the world of programming.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The fence post problem,<br>is a curse to all other programmers.</p>\n  <p>When you have three apples,<br>in the computer world.</p>\n  <p>The size of the list that holds your apples,<br>will be three, as it holds three elements.</p>\n  <p>But to address your apples,<br>you start at zero, not at one.</p>\n  <p>To refer to the first apple in your list,<br>you say apple zero.</p>\n  <p>This is still manageable,<br>but, when you are looping over your list.</p>\n  <p>You need to put an upper boundary for this operation,<br>for how many apples do you want to go over.</p>\n  <p>And this is where it often happens,<br>the person will say three apples,...</p>\n  <p>Because that is how many apples they have,<br>but that is wrong.</p>\n  <p>The loop does not ask how many apples,<br>but rather, at what index to stop.</p>\n  <p>We have three apples,<br>but they are known as zero, one, two.</p>\n  <p>So we need to stop our loop at two,<br>not three.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>In JavaScript lists of things are called Arrays,<br>so when you have three apples you think of them as an array of apples.</p>\n  <p>Our for loop has three expressions,<br>initialization, condition, and final expression.</p>\n  <p>They are said to be optional,<br>which is short for saying, infinite loop danger.</p>\n  <p>In the body of your for loop, between the curly brackets,<br>where you put in your code.</p>\n  <p>You have access to whatever you put into initialization,<br>so if you said:</p>\n  <p>Counter equals zero; while counter is less than apple array length, counter = counter + 1;</p>\n  <p>You can print your counter,<br>each time the body of the loop executes.</p>\n  <p>You can end a loop early with the break statement,<br>or skip current execution, and start with the next one with the continue statement.</p>\n  <p>But, it is best not to get too creative,<br>because then you will have trouble reading your own code.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>In closing,<br>let us iterate over our three apples.</p>\n  <p>For appleCounter=0, while appleCounter &lt; appleList length; new appleCounter = old appleCounter +1.</p>\n  <p>so pur apple counter will be 0, then 1, and 2,<br>and for a tiny second 3, at which point appleCounter will no longer be LESS than apple list length (which is 3).</p>\n  <p>And the for loop body will not execute,<br>appleCounter will be discarded as the for loop party is over.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>When people write loops, they forget that less than sign,<br>sometimes use a less than or equal, because they think that will get all the apples.</p>\n  <p>But no,<br>nuh uh.</p>\n  <p>We have three apples,<br>and need to stop at two.</p>\n  <p>Because to use the appleCounter variable to point at apples in our for loop,<br>we have to initialize it to zero, as arrays start at zero.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Lastly, I caused the fence post problem but for an interesting reason,<br>in some cases we have to hide that we work with zero based indexing.</p>\n  <p>The creator of the library <a href=\"https://www.npmjs.com/package/pagination#current-integer\">chose to use number one</a>,<br>and that is a valid choice.</p>\n  <p>But when I was setting it up, I assumed,<br>we always start everything at 0 no matter what.</p>\n  <p>Iâ€™ll be rewriting this portion of the new website,<br>and my program will have a page zero.</p>\n  <p>Both a zero in the URL bar,<br>and on a button.</p>\n  <p>When numbering things in the computer world you should always start with zero,<br>zero only becomes scary, when you start at one.</p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I must admit I welcome the Fence Post problem,<br>and I think of zero as a proper number we should all embrace.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is like a hug,<br>from the world of programming.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The fence post problem,<br>is a curse to all other programmers.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When you have three apples,<br>in the computer world.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The size of the list that holds your apples,<br>will be three, as it holds three elements.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But to address your apples,<br>you start at zero, not at one.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">To refer to the first apple in your list,<br>you say apple zero.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This is still manageable,<br>but, when you are looping over your list.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You need to put an upper boundary for this operation,<br>for how many apples do you want to go over.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And this is where it often happens,<br>the person will say three apples,...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because that is how many apples they have,<br>but that is wrong.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The loop does not ask how many apples,<br>but rather, at what index to stop.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We have three apples,<br>but they are known as zero, one, two.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So we need to stop our loop at two,<br>not three.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In JavaScript lists of things are called Arrays,<br>so when you have three apples you think of them as an array of apples.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Our for loop has three expressions,<br>initialization, condition, and final expression.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They are said to be optional,<br>which is short for saying, infinite loop danger.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In the body of your for loop, between the curly brackets,<br>where you put in your code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You have access to whatever you put into initialization,<br>so if you said:</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Counter equals zero; while counter is less than apple array length, counter = counter + 1;</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You can print your counter,<br>each time the body of the loop executes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You can end a loop early with the break statement,<br>or skip current execution, and start with the next one with the continue statement.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But, it is best not to get too creative,<br>because then you will have trouble reading your own code.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In closing,<br>let us iterate over our three apples.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">For appleCounter=0, while appleCounter &lt; appleList length; new appleCounter = old appleCounter +1.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">so pur apple counter will be 0, then 1, and 2,<br>and for a tiny second 3, at which point appleCounter will no longer be LESS than apple list length (which is 3).</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the for loop body will not execute,<br>appleCounter will be discarded as the for loop party is over.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When people write loops, they forget that less than sign,<br>sometimes use a less than or equal, because they think that will get all the apples.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But no,<br>nuh uh.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We have three apples,<br>and need to stop at two.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because to use the appleCounter variable to point at apples in our for loop,<br>we have to initialize it to zero, as arrays start at zero.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Lastly, I caused the fence post problem but for an interesting reason,<br>in some cases we have to hide that we work with zero based indexing.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The creator of the library <a href=\"https://www.npmjs.com/package/pagination#current-integer\">chose to use number one</a>,<br>and that is a valid choice.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But when I was setting it up, I assumed,<br>we always start everything at 0 no matter what.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Iâ€™ll be rewriting this portion of the new website,<br>and my program will have a page zero.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Both a zero in the URL bar,<br>and on a button.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When numbering things in the computer world you should always start with zero,<br>zero only becomes scary, when you start at one.</div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">I must admit I welcome the Fence Post problem,<br>and I think of zero as a proper number we should all embrace.</div>\n  <div class=\"paragraph\">It is like a hug,<br>from the world of programming.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The fence post problem,<br>is a curse to all other programmers.</div>\n  <div class=\"paragraph\">When you have three apples,<br>in the computer world.</div>\n  <div class=\"paragraph\">The size of the list that holds your apples,<br>will be three, as it holds three elements.</div>\n  <div class=\"paragraph\">But to address your apples,<br>you start at zero, not at one.</div>\n  <div class=\"paragraph\">To refer to the first apple in your list,<br>you say apple zero.</div>\n  <div class=\"paragraph\">This is still manageable,<br>but, when you are looping over your list.</div>\n  <div class=\"paragraph\">You need to put an upper boundary for this operation,<br>for how many apples do you want to go over.</div>\n  <div class=\"paragraph\">And this is where it often happens,<br>the person will say three apples,...</div>\n  <div class=\"paragraph\">Because that is how many apples they have,<br>but that is wrong.</div>\n  <div class=\"paragraph\">The loop does not ask how many apples,<br>but rather, at what index to stop.</div>\n  <div class=\"paragraph\">We have three apples,<br>but they are known as zero, one, two.</div>\n  <div class=\"paragraph\">So we need to stop our loop at two,<br>not three.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">In JavaScript lists of things are called Arrays,<br>so when you have three apples you think of them as an array of apples.</div>\n  <div class=\"paragraph\">Our for loop has three expressions,<br>initialization, condition, and final expression.</div>\n  <div class=\"paragraph\">They are said to be optional,<br>which is short for saying, infinite loop danger.</div>\n  <div class=\"paragraph\">In the body of your for loop, between the curly brackets,<br>where you put in your code.</div>\n  <div class=\"paragraph\">You have access to whatever you put into initialization,<br>so if you said:</div>\n  <div class=\"paragraph\">Counter equals zero; while counter is less than apple array length, counter = counter + 1;</div>\n  <div class=\"paragraph\">You can print your counter,<br>each time the body of the loop executes.</div>\n  <div class=\"paragraph\">You can end a loop early with the break statement,<br>or skip current execution, and start with the next one with the continue statement.</div>\n  <div class=\"paragraph\">But, it is best not to get too creative,<br>because then you will have trouble reading your own code.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">In closing,<br>let us iterate over our three apples.</div>\n  <div class=\"paragraph\">For appleCounter=0, while appleCounter &lt; appleList length; new appleCounter = old appleCounter +1.</div>\n  <div class=\"paragraph\">so pur apple counter will be 0, then 1, and 2,<br>and for a tiny second 3, at which point appleCounter will no longer be LESS than apple list length (which is 3).</div>\n  <div class=\"paragraph\">And the for loop body will not execute,<br>appleCounter will be discarded as the for loop party is over.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">When people write loops, they forget that less than sign,<br>sometimes use a less than or equal, because they think that will get all the apples.</div>\n  <div class=\"paragraph\">But no,<br>nuh uh.</div>\n  <div class=\"paragraph\">We have three apples,<br>and need to stop at two.</div>\n  <div class=\"paragraph\">Because to use the appleCounter variable to point at apples in our for loop,<br>we have to initialize it to zero, as arrays start at zero.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Lastly, I caused the fence post problem but for an interesting reason,<br>in some cases we have to hide that we work with zero based indexing.</div>\n  <div class=\"paragraph\">The creator of the library <span>chose to use number one<sup>[1]</sup></span>,<br>and that is a valid choice.</div>\n  <div class=\"paragraph\">But when I was setting it up, I assumed,<br>we always start everything at 0 no matter what.</div>\n  <div class=\"paragraph\">Iâ€™ll be rewriting this portion of the new website,<br>and my program will have a page zero.</div>\n  <div class=\"paragraph\">Both a zero in the URL bar,<br>and on a button.</div>\n  <div class=\"paragraph\">When numbering things in the computer world you should always start with zero,<br>zero only becomes scary, when you start at one.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://www.npmjs.com/package/pagination#current-integer</div>\n</div>",
  "text": "I must admit I welcome the Fence Post problem,\nand I think of zero as a proper number we should all embrace.\nIt is like a hug,\nfrom the world of programming.\n\nThe fence post problem,\nis a curse to all other programmers.\nWhen you have three apples,\nin the computer world.\nThe size of the list that holds your apples,\nwill be three, as it holds three elements.\nBut to address your apples,\nyou start at zero, not at one.\nTo refer to the first apple in your list,\nyou say apple zero.\nThis is still manageable,\nbut, when you are looping over your list.\nYou need to put an upper boundary for this operation,\nfor how many apples do you want to go over.\nAnd this is where it often happens,\nthe person will say three apples,...\nBecause that is how many apples they have,\nbut that is wrong.\nThe loop does not ask how many apples,\nbut rather, at what index to stop.\nWe have three apples,\nbut they are known as zero, one, two.\nSo we need to stop our loop at two,\nnot three.\n\nIn JavaScript lists of things are called Arrays,\nso when you have three apples you think of them as an array of apples.\nOur for loop has three expressions,\ninitialization, condition, and final expression.\nThey are said to be optional,\nwhich is short for saying, infinite loop danger.\nIn the body of your for loop, between the curly brackets,\nwhere you put in your code.\nYou have access to whatever you put into initialization,\nso if you said:\nCounter equals zero; while counter is less than apple array length, counter = counter + 1;\nYou can print your counter,\neach time the body of the loop executes.\nYou can end a loop early with the break statement,\nor skip current execution, and start with the next one with the continue statement.\nBut, it is best not to get too creative,\nbecause then you will have trouble reading your own code.\n\nIn closing,\nlet us iterate over our three apples.\nFor appleCounter=0, while appleCounter < appleList length; new appleCounter = old appleCounter +1.\nso pur apple counter will be 0, then 1, and 2,\nand for a tiny second 3, at which point appleCounter will no longer be LESS than apple list length (which is 3).\nAnd the for loop body will not execute,\nappleCounter will be discarded as the for loop party is over.\n\nWhen people write loops, they forget that less than sign,\nsometimes use a less than or equal, because they think that will get all the apples.\nBut no,\nnuh uh.\nWe have three apples,\nand need to stop at two.\nBecause to use the appleCounter variable to point at apples in our for loop,\nwe have to initialize it to zero, as arrays start at zero.\n\nLastly, I caused the fence post problem but for an interesting reason,\nin some cases we have to hide that we work with zero based indexing.\nThe creator of the library chose to use number one[1],\nand that is a valid choice.\nBut when I was setting it up, I assumed,\nwe always start everything at 0 no matter what.\nIâ€™ll be rewriting this portion of the new website,\nand my program will have a page zero.\nBoth a zero in the URL bar,\nand on a button.\nWhen numbering things in the computer world you should always start with zero,\nzero only becomes scary, when you start at one.\nÂ \nReferences\n[1]: https://www.npmjs.com/package/pagination#current-integer",
  "images": [],
  "links": [
    {
      "title": "chose to use number one",
      "url": "https://www.npmjs.com/package/pagination#current-integer",
      "hostname": "www.npmjs.com"
    }
  ]
}