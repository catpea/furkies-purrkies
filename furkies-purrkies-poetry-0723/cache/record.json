{
  "name": "furkies-purrkies-poetry-0723",
  "id": "furkies-purrkies-poetry-0723",
  "title": "A Programmer's Poem: ORM, REST, OPSEC, MOO, And A Scary Smelly Grue",
  "date": "2022-02-21T21:00:23.402Z",
  "image": "poetry-0723-illustration.jpg",
  "artwork": "https://unsplash.com/photos/QuP5RL_E5oE",
  "audio": "poetry-0723.mp3",
  "html": "<div class=\"section\">\n  <p>You know how down at the CPU level,<br>you have talk in ones and zeros, XOR and AND.</p>\n  <p>We created a nicer languages above that,<br>like C, where you can nest functions.</p>\n  <p>You can have an UPSERT function,<br>that contains INSERT or UPDATE functions.</p>\n  <p>If data in whatever the program is using is missing,<br>then we INSERT, and if it already there then we UPDATE.</p>\n  <p>So UPSERT encompasses multiple functions,<br>and it is pretty readable.</p>\n  <p>Now, on C level,<br>we have to define things.</p>\n  <p>You can't just say, name = alice,<br>you have to define a name array, and remember a string terminator.</p>\n  <p>To store the five letter name Alice,<br>you need an array of six characters, for the name and a string terminator character.</p>\n  <p>It is a good language,<br>but we invented better.</p>\n  <p>We have languages where we can just say name = alice,<br>and everything will be taken care of for us.</p>\n  <p>Even better than that,<br>we have languages where you can say name = evaluate name - alice; return name</p>\n  <p>This is called an eval statement,<br>and everyone is scared of it, becasue you are running code inside code.</p>\n  <p>Though you never use it in production,<br>eval is a sign of a healthy language.</p>\n  <p>If a language prevents you from evaluating code,<br>then it is a language for cubicle workers, crafted to control the coders.</p>\n  <p>JavaScript is a very free language,<br>it will let you add a number to a letter.</p>\n  <p>And will probably return the sum of the number and ASCII code of the letter,<br>but it may also try to concatenate, or who cares.</p>\n  <p>This language does not try to control you,<br>it will let you do whatever the heck you want.</p>\n  <p>Even if it is crazy,<br>like adding letters to numbers, which is also crazy awesome.</p>\n  <p>And a sign,<br>that corporate has not meddled with the language standard.</p>\n  <p>Once some big corporation steps in,<br>they will strip the language of easy mistakes.</p>\n  <p>Load it up on computers,<br>give it to all the High Schools.</p>\n  <p>Wait for them to graduate college,<br>and then charge them for the enterprise version.</p>\n  <p>Or for business use,<br>or for business license.</p>\n  <p>Or cancel the language,<br>because they have something that will generate more profits.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>You have to stick with the rebel languages,<br>that is what everyone else will be going.</p>\n  <p>Unless they got trapped in a cubicle,<br>then they will spout how evil eval is.</p>\n  <p>Because in order to believe that their walled language is good,<br>they will fight to make all the other languages look bad.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Now, there is another bump here,<br>because the web browser is not only awesome and very popular.</p>\n  <p>But powerful enough to let you build a code editor,<br>it means you can edit code in a web browser, and not need a code editor.</p>\n  <p>Java is slow and bulky for no reason,<br>Web browser is slow and bulky for beautiful reasons.</p>\n  <p>Which also means,<br>JavaScript.</p>\n  <p>There was a time when it was unwise to use JavaScript on the server,<br>it was possible but unwise, as it was young and slow.</p>\n  <p>We had Perl and PHP,<br>while Microsoft was murdering their once pretty languages for something they felt was better.</p>\n  <p>It was actually different,<br>not better - but people who do Microsoft, will absolutely attack me for saying this.</p>\n  <p>Though they may notice, by now, that Microsoft killed IE,<br>that Visual Studio Code uses a browser, probably chrome, but I don't care, corporate will make mistakes, it is what they do.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Perl is beautiful,<br>writing Perl it is like making jewelry, it makes OOP look ugly.</p>\n  <p>PHP is useful, full of libraries,<br>and its OOP looks pretty, it flows like water, it is good for you.</p>\n  <p>But the moment Node came out,<br>which is JavaScript for the server.</p>\n  <p>All non JavaScript languages,<br>kind of became outdated, and certainly became outdated in context of the web.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Because, you can now have code in the same language,<br>in the browser, and on the server.</p>\n  <p>Which is to say, if you write your server code in PHP,<br>and your browser code in JavaScript - you are just weird.</p>\n  <p>Like, why would you want to re-create your objects,<br>in some other language.</p>\n  <p>People were shocked when I brought this up,<br>as in - how dare I tell them what language to use.</p>\n  <p>I was merely telling them,<br>the truth.</p>\n  <p>Same language, client and server,<br>and it just happens to be a language that is not babysitting cubicle workers.</p>\n  <p>It has eval,<br>and it lets yo add letters to numbers, this is a sign of a healthy language.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Now of course, Microsoft came in and made their own version,<br>guess what feature they added?</p>\n  <p>Yeah, the whole count letters of your name thing,<br>they laced JavaScript with strong typing.</p>\n  <p>Meaning you have to define the type of your variable,<br>they say \"Oh it is just JavaScript\".</p>\n  <p>But it is actually cubicle worker cool aid,<br>the typing is there to make the code editors pretend to be useful.</p>\n  <p>The variable type information,<br>will allow for fancy drop-down, and a measure of error checking.</p>\n  <p>If this was 1995,<br>it would be, neat to look at, though probably not actually use it, unless you had to.</p>\n  <p>This language is called TypeScript,<br>as in Data Typed JavaScript.</p>\n  <p>And to me it is hilarious, as it is a step backwards to make their programmers brain-less,<br>as in think less about things they are doing.</p>\n  <p>So JavaScript is still fine,<br>they just modified it to make their own thing.</p>\n  <p>There was briefly a flash of CoffeScript,<br>a JavaScript alternative.</p>\n  <p>Though TypeScript will last much longer because of all the money it makes,<br>it will eventually fade away like CoffeScript did.</p>\n  <p>Who needs a branch of JavaScript,<br>follow the eval statement, as corporate will always destroy the language to make profits and get raises.</p>\n  <p>That's what corporate is for,<br>profits, not languages.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>But JavaScript is still not good enough,<br>there is something better.</p>\n  <p>Though this time,<br>that something better is written in JavaScript, it is a JavaScript pattern.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And here I have to mention Databases,<br>we can't use files.</p>\n  <p>Because as far as multiple users poking at the keyboard at the same time,<br>files live in the world of adding numbers to letters.</p>\n  <p>There is no good answer to who saves first,<br>files are for single users sitting at the computer.</p>\n  <p>You can use mutually exclusive locks,<br>or folders named as the files, with versioned GUID named real files, that need manual version conflict resolution.</p>\n  <p>But if you can't just save a file - simply,<br>just let it go, use the database.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Database use tables,<br>a table is like a spreadsheet.</p>\n  <p>You add rows to a table,<br>each row has cells.</p>\n  <p>And a type, have a good reason to need type information,<br>they aim to be efficient.</p>\n  <p>So you define the username column to be short text,<br>and if you have a description column, you define it to be reasonably long.</p>\n  <p>There will be an error if you try to add a row,<br>that has a username, that is too long.</p>\n  <p>That is why websites sometimes tell you,<br>this field cannot be longer than 255 characters.</p>\n  <p>YouTube for example has a 5,000 letter video description field in their database,<br>and I will need to cut this poem shorter to paste it there.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>You see a divergence here,<br>moment ago we had JavaScript where Microsoft disgraced it self by making a copy of it with data type limits to make their IDE IntelliSense nonsense work better.</p>\n  <p>But now we are adding databases,<br>that have limits.</p>\n  <p>We are adding it for a good reason,<br>safe storage of data - that is a very good reason - compared to making debugging less crappy in TypeScript.</p>\n  <p>In fact a language without a good connection to a database,<br>is not that good.</p>\n  <p>And manually communicating with a database,<br>like we used to in Perl days, was ugly, and for many, caused security issues - SQL injections.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Now we have this thing called ORM in a language as wild as server side JavaScript,<br>what ORM does is let us use JavaScript Objects, very simple and pretty things, to hide the database stuff away.</p>\n  <p>What ORM stand for is mangled English,<br>ORM translates cute JavaScript to database table, without yo needing to think about it too much.</p>\n  <p>So you just make an object like User,<br>say user.name = \"alice\", user.email = \"alice at example.com\" and then user.save() and it is saved in the database table called users.</p>\n  <p>ORM also lets you create relationships between such objects,<br>so you can say Alice has many articles she published.</p>\n  <p>And in a table, called articles, you will find, alices userID,<br>along with all the other id/s of users.</p>\n  <p>And the alice object, will be smart enough,<br>to only give you articles with Alice's id, when yo ask for it.</p>\n  <p>There is a Relational Database, behind this object,<br>and we establish a relationship between user and article, a oneToMany relationship to be precise, but this is completely abstracted away with our sweet javascript.</p>\n  <p>By the way, this relationship is called a JOIN,<br>as we JOIN two database tables on UserID, the user ID in Users table, and User ID, in the Articles table.</p>\n  <p>But you don't have to think about it,<br>because ORM loves you - and it takes good care of you.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>But we need more,<br>oh yes.</p>\n  <p>Because all of this is happening on the server,<br>and we need to bring this stuff safely into the browser.</p>\n  <p>So on top of ORM,<br>we have to add REST.</p>\n  <p>I won't tell yo what REST stands it is just more mangled English,<br>people being cutsy with words.</p>\n  <p>It is a technology related to the URL,<br>in your address bar, all those slashes.</p>\n  <p>This technology,<br>is good for working with ORM.</p>\n  <p>Because we can have a user/1,<br>and this will give us alice, as she happens to be the first user.</p>\n  <p>We can also say, user/1/article/1,<br>and that will give us the first article she published.</p>\n  <p>We can get more creative here,<br>and there is a good way to expose ORM information under REST, and a questionably creative way - which can be beautiful.</p>\n  <p>The best way, however,<br>is an automatic way.</p>\n  <p>So here, you are just creating your Objects,<br>that automatically take care of the database.</p>\n  <p>And you automatically,<br>get all of that stuff exposed as paths, in the URL.</p>\n  <p>For free, you get your databases taken care of,<br>and your website exposes all those objects automatically and uniformly.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>See, you don't need a better IDE,<br>you just need a better IDEA - ha ha... where stuff can't get broken.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>But we need more,<br>because we can't just expose all the users to the internet.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>We need to give users abilities,<br>the way they can have articles.</p>\n  <p>One ability they always get,<br>is updating their address filed.</p>\n  <p>Though, they are not quite allowed to update their e-mail address,<br>because that needs to go through a verification process.</p>\n  <p>We want to send an email to the old account,<br>just in case someone forgot to log out on a public computer, and hopefully they don't have their email open as well.</p>\n  <p>We also want to make sure the new email,<br>is correct, and the user can click on a unique URL we send them.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And of course yo can already tell,<br>things are breaking down for us.</p>\n  <p>They are no longer automatic,<br>different things need different things.</p>\n  <p>Yeah we can account for all the variations,<br>and group them, but again, we end up with questionable complexity.</p>\n  <p>Some very smart people,<br>don't want you to have a password.</p>\n  <p>One smart cat, decided yo shouldn't have a password,<br>that he will only store your email.</p>\n  <p>And to log in,<br>you just enter your email, he will send yo a link...</p>\n  <p>And when yo click it,<br>you will be logged in.</p>\n  <p>As a result,<br>you can't forget your password, because yo don't have one.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>That is a crazy unique dynamic,<br>and it is so unique that it is hard to generalize it and classify it in a uniform way.</p>\n  <p>It is hard to abstract,<br>without rewriting code.</p>\n  <p>If bob chooses not to have a password,<br>then he can't have an update your password box in his profile.</p>\n  <p>That means you have to go in there and code that exception in,<br>that one and a hundred others.</p>\n  <p>We had this wonderful JavaScript, ORM, REST and Objects and URL paths experience,<br>and now it is an explosion of User Interface complexity.</p>\n  <p>And workflows, because, bob is not who he says he is, at all,<br><a href=\"https://www.youtube.com/watch?v=zFLz70eQ9VI\">his real name is Mallory, and no, he does not belong to a don't leak all the internal repos red team, Mallory is Malicious</a>.</p>\n  <p>He will try to change the password,<br>even though he is password-less, and one thousand other things, and one of them, will gran him remote code execution.</p>\n  <p>And that one thing,<br>is always obscured by the explosion of complexity.</p>\n  <p>We will SOMEWHAT remember to disable the change your password UI,<br>for password less users...</p>\n  <p>But will we remember to code a system,<br>that prevents the submission of the form if Mallory re-enables the UI, based on research from one of his other accounts.</p>\n  <p>Yes, having the ability to change the password field, may not get anything hacked,<br>but it is proof that the system has failed.</p>\n  <p>It is inconsistent,<br>the abstractions are leaking.</p>\n  <p>Mallory is already telling tech support he never enabled password less,<br>will this escalate his privileges.</p>\n  <p>Yes, how, red herring,<br>his problem is fixed, he can login like before, but there is just one more problem he needs help with...</p>\n  <p>He needs a solution for,<br>and now that he praised tech support, and tech support gets a little problem fixed happy smiley face.</p>\n  <p>Tech support likes Mallory,<br>tech support will not think twice to click the link that Mallory just sent.</p>\n  <p>Tech support want to help,<br><a href=\"https://en.wikipedia.org/wiki/List_of_data_breaches\">and your business just ended up on List of data breaches on WikiPedia 14,870,304 users, all your customers leaked by helpful tech support being fed a red herring</a>.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>At this point we could almost forgive Microsoft for creating TypeScript,<br>because we could use a little breadcrumb path to at least mangle our cute automatic REST to STOP allowing password change for password less users...</p>\n  <p>Just in case it is used as a red herring,<br>in a fast paces cheerful and feel good dance of privilege escalation in Bangalore.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>This is why you need to become a programmer,<br>if yo start in High School, yo will surely invent a consistent automatic system that prevents the leakage of abstractions.</p>\n  <p>We don't need a better IDE or more typed languages with IntelliSense,<br>we need you.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Because to you,<br>this is a game.</p>\n  <p>And the game is the solution,<br>Multi User Dungeons Object Oriented to be precise, <a href=\"https://www.youtube.com/watch?v=QBnXvtR1qBw\">MOO</a> and <a href=\"https://www.youtube.com/watch?v=QzvqSVgc2t4\">MUD</a></p>\n  <p>You see, REST is good, but WikiWiki teaches us,<br>the power of consistency.</p>\n  <p>What if we just had Locations,<br>like WikiPedia has articles.</p>\n  <p>If you are allowed to cross the pathway,<br>into a location, because you have a password key, then you can update your password.</p>\n  <p>If you don't have this feature in your inventory,<br>then you can't access that location.</p>\n  <p>TO be clear I am describing a tiny mechanism that builds on top of ORM,<br>and though it has paths, those are not RESTFUL paths, they are of the Dungeon World.</p>\n  <p>They are an anthropomorphized world of objects,<br>and it is tiny and efficient, nothing at all like some bloated VR world.</p>\n  <p>Rails, <a href=\"https://github.com/strapi/strapi\">strapi</a>, or Cake even is all the proof that Objects and Properties can be defined with a normal User Interface,<br>ORM objects can be built by non-programmers.</p>\n  <p>If MUD can replace the paths of REST and make them more secure,<br>then then company you invent can allow for Web Application programming, to people who hate code.</p>\n  <p>Not because they can't program, or don't want to learn,<br>but because they can sense that it is the old way - that better abstractions can be had.</p>\n  <p>Like programming web applications,<br>through a kind of a game.</p>\n  <p>Oh, sure is sounds goofy,<br>you are walking around dungeons after all.</p>\n  <p>But if Mallory touches that password door,</p>\n  <p>without the correct key in his inventory, he gets eaten by a <a href=\"https://www.youtube.com/watch?v=f4ZVzl_H_2w\">Grue</a>.</p>\n  <p>Maybe we need to consider, that pretending abstractions are not leaky is goofy,<br>and that using an intelligent system that resembles the mechanics of a real world isn't goofy.</p>\n  <p>You are looking at highly sophisticated security systems,<br>that are as easy to comprehend for a human as using a key to inlock a door, or check out an article from the user's home library.</p>\n  <p>It may even be the key of strong AI,<br>that can improve it self - because why stop here?</p>\n  <p>Anyways, when you have a Grue on your blue team,<br>that consistently chomps red team members, the world becomes a much happier place.</p>\n  <p>For those of you struggling to come up with a name for this new and groundgreaking technology, I offer:<br>Complete And Thorough Protective Electronic Armor, or C.A.T.P.E.A. for short.</p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You know how down at the CPU level,<br>you have talk in ones and zeros, XOR and AND.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We created a nicer languages above that,<br>like C, where you can nest functions.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You can have an UPSERT function,<br>that contains INSERT or UPDATE functions.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If data in whatever the program is using is missing,<br>then we INSERT, and if it already there then we UPDATE.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So UPSERT encompasses multiple functions,<br>and it is pretty readable.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Now, on C level,<br>we have to define things.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You can't just say, name = alice,<br>you have to define a name array, and remember a string terminator.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">To store the five letter name Alice,<br>you need an array of six characters, for the name and a string terminator character.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is a good language,<br>but we invented better.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We have languages where we can just say name = alice,<br>and everything will be taken care of for us.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Even better than that,<br>we have languages where you can say name = evaluate name - alice; return name</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This is called an eval statement,<br>and everyone is scared of it, becasue you are running code inside code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Though you never use it in production,<br>eval is a sign of a healthy language.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If a language prevents you from evaluating code,<br>then it is a language for cubicle workers, crafted to control the coders.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">JavaScript is a very free language,<br>it will let you add a number to a letter.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And will probably return the sum of the number and ASCII code of the letter,<br>but it may also try to concatenate, or who cares.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This language does not try to control you,<br>it will let you do whatever the heck you want.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Even if it is crazy,<br>like adding letters to numbers, which is also crazy awesome.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And a sign,<br>that corporate has not meddled with the language standard.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Once some big corporation steps in,<br>they will strip the language of easy mistakes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Load it up on computers,<br>give it to all the High Schools.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Wait for them to graduate college,<br>and then charge them for the enterprise version.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Or for business use,<br>or for business license.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Or cancel the language,<br>because they have something that will generate more profits.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You have to stick with the rebel languages,<br>that is what everyone else will be going.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Unless they got trapped in a cubicle,<br>then they will spout how evil eval is.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because in order to believe that their walled language is good,<br>they will fight to make all the other languages look bad.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Now, there is another bump here,<br>because the web browser is not only awesome and very popular.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But powerful enough to let you build a code editor,<br>it means you can edit code in a web browser, and not need a code editor.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Java is slow and bulky for no reason,<br>Web browser is slow and bulky for beautiful reasons.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Which also means,<br>JavaScript.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There was a time when it was unwise to use JavaScript on the server,<br>it was possible but unwise, as it was young and slow.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We had Perl and PHP,<br>while Microsoft was murdering their once pretty languages for something they felt was better.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It was actually different,<br>not better - but people who do Microsoft, will absolutely attack me for saying this.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Though they may notice, by now, that Microsoft killed IE,<br>that Visual Studio Code uses a browser, probably chrome, but I don't care, corporate will make mistakes, it is what they do.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Perl is beautiful,<br>writing Perl it is like making jewelry, it makes OOP look ugly.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">PHP is useful, full of libraries,<br>and its OOP looks pretty, it flows like water, it is good for you.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But the moment Node came out,<br>which is JavaScript for the server.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">All non JavaScript languages,<br>kind of became outdated, and certainly became outdated in context of the web.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because, you can now have code in the same language,<br>in the browser, and on the server.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Which is to say, if you write your server code in PHP,<br>and your browser code in JavaScript - you are just weird.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Like, why would you want to re-create your objects,<br>in some other language.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">People were shocked when I brought this up,<br>as in - how dare I tell them what language to use.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I was merely telling them,<br>the truth.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Same language, client and server,<br>and it just happens to be a language that is not babysitting cubicle workers.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It has eval,<br>and it lets yo add letters to numbers, this is a sign of a healthy language.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Now of course, Microsoft came in and made their own version,<br>guess what feature they added?</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Yeah, the whole count letters of your name thing,<br>they laced JavaScript with strong typing.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Meaning you have to define the type of your variable,<br>they say \"Oh it is just JavaScript\".</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But it is actually cubicle worker cool aid,<br>the typing is there to make the code editors pretend to be useful.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The variable type information,<br>will allow for fancy drop-down, and a measure of error checking.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If this was 1995,<br>it would be, neat to look at, though probably not actually use it, unless you had to.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This language is called TypeScript,<br>as in Data Typed JavaScript.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And to me it is hilarious, as it is a step backwards to make their programmers brain-less,<br>as in think less about things they are doing.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So JavaScript is still fine,<br>they just modified it to make their own thing.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There was briefly a flash of CoffeScript,<br>a JavaScript alternative.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Though TypeScript will last much longer because of all the money it makes,<br>it will eventually fade away like CoffeScript did.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Who needs a branch of JavaScript,<br>follow the eval statement, as corporate will always destroy the language to make profits and get raises.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That's what corporate is for,<br>profits, not languages.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But JavaScript is still not good enough,<br>there is something better.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Though this time,<br>that something better is written in JavaScript, it is a JavaScript pattern.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And here I have to mention Databases,<br>we can't use files.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because as far as multiple users poking at the keyboard at the same time,<br>files live in the world of adding numbers to letters.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There is no good answer to who saves first,<br>files are for single users sitting at the computer.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You can use mutually exclusive locks,<br>or folders named as the files, with versioned GUID named real files, that need manual version conflict resolution.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But if you can't just save a file - simply,<br>just let it go, use the database.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Database use tables,<br>a table is like a spreadsheet.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You add rows to a table,<br>each row has cells.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And a type, have a good reason to need type information,<br>they aim to be efficient.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So you define the username column to be short text,<br>and if you have a description column, you define it to be reasonably long.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There will be an error if you try to add a row,<br>that has a username, that is too long.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That is why websites sometimes tell you,<br>this field cannot be longer than 255 characters.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">YouTube for example has a 5,000 letter video description field in their database,<br>and I will need to cut this poem shorter to paste it there.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You see a divergence here,<br>moment ago we had JavaScript where Microsoft disgraced it self by making a copy of it with data type limits to make their IDE IntelliSense nonsense work better.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But now we are adding databases,<br>that have limits.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We are adding it for a good reason,<br>safe storage of data - that is a very good reason - compared to making debugging less crappy in TypeScript.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In fact a language without a good connection to a database,<br>is not that good.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And manually communicating with a database,<br>like we used to in Perl days, was ugly, and for many, caused security issues - SQL injections.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Now we have this thing called ORM in a language as wild as server side JavaScript,<br>what ORM does is let us use JavaScript Objects, very simple and pretty things, to hide the database stuff away.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">What ORM stand for is mangled English,<br>ORM translates cute JavaScript to database table, without yo needing to think about it too much.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So you just make an object like User,<br>say user.name = \"alice\", user.email = \"alice at example.com\" and then user.save() and it is saved in the database table called users.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">ORM also lets you create relationships between such objects,<br>so you can say Alice has many articles she published.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And in a table, called articles, you will find, alices userID,<br>along with all the other id/s of users.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the alice object, will be smart enough,<br>to only give you articles with Alice's id, when yo ask for it.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There is a Relational Database, behind this object,<br>and we establish a relationship between user and article, a oneToMany relationship to be precise, but this is completely abstracted away with our sweet javascript.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">By the way, this relationship is called a JOIN,<br>as we JOIN two database tables on UserID, the user ID in Users table, and User ID, in the Articles table.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But you don't have to think about it,<br>because ORM loves you - and it takes good care of you.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But we need more,<br>oh yes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because all of this is happening on the server,<br>and we need to bring this stuff safely into the browser.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So on top of ORM,<br>we have to add REST.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I won't tell yo what REST stands it is just more mangled English,<br>people being cutsy with words.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is a technology related to the URL,<br>in your address bar, all those slashes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This technology,<br>is good for working with ORM.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because we can have a user/1,<br>and this will give us alice, as she happens to be the first user.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We can also say, user/1/article/1,<br>and that will give us the first article she published.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We can get more creative here,<br>and there is a good way to expose ORM information under REST, and a questionably creative way - which can be beautiful.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The best way, however,<br>is an automatic way.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So here, you are just creating your Objects,<br>that automatically take care of the database.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And you automatically,<br>get all of that stuff exposed as paths, in the URL.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">For free, you get your databases taken care of,<br>and your website exposes all those objects automatically and uniformly.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">See, you don't need a better IDE,<br>you just need a better IDEA - ha ha... where stuff can't get broken.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But we need more,<br>because we can't just expose all the users to the internet.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We need to give users abilities,<br>the way they can have articles.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">One ability they always get,<br>is updating their address filed.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Though, they are not quite allowed to update their e-mail address,<br>because that needs to go through a verification process.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We want to send an email to the old account,<br>just in case someone forgot to log out on a public computer, and hopefully they don't have their email open as well.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We also want to make sure the new email,<br>is correct, and the user can click on a unique URL we send them.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And of course yo can already tell,<br>things are breaking down for us.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They are no longer automatic,<br>different things need different things.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Yeah we can account for all the variations,<br>and group them, but again, we end up with questionable complexity.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Some very smart people,<br>don't want you to have a password.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">One smart cat, decided yo shouldn't have a password,<br>that he will only store your email.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And to log in,<br>you just enter your email, he will send yo a link...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And when yo click it,<br>you will be logged in.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">As a result,<br>you can't forget your password, because yo don't have one.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That is a crazy unique dynamic,<br>and it is so unique that it is hard to generalize it and classify it in a uniform way.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is hard to abstract,<br>without rewriting code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If bob chooses not to have a password,<br>then he can't have an update your password box in his profile.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">That means you have to go in there and code that exception in,<br>that one and a hundred others.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We had this wonderful JavaScript, ORM, REST and Objects and URL paths experience,<br>and now it is an explosion of User Interface complexity.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And workflows, because, bob is not who he says he is, at all,<br><a href=\"https://www.youtube.com/watch?v=zFLz70eQ9VI\">his real name is Mallory, and no, he does not belong to a don't leak all the internal repos red team, Mallory is Malicious</a>.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">He will try to change the password,<br>even though he is password-less, and one thousand other things, and one of them, will gran him remote code execution.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And that one thing,<br>is always obscured by the explosion of complexity.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We will SOMEWHAT remember to disable the change your password UI,<br>for password less users...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But will we remember to code a system,<br>that prevents the submission of the form if Mallory re-enables the UI, based on research from one of his other accounts.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Yes, having the ability to change the password field, may not get anything hacked,<br>but it is proof that the system has failed.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is inconsistent,<br>the abstractions are leaking.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Mallory is already telling tech support he never enabled password less,<br>will this escalate his privileges.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Yes, how, red herring,<br>his problem is fixed, he can login like before, but there is just one more problem he needs help with...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">He needs a solution for,<br>and now that he praised tech support, and tech support gets a little problem fixed happy smiley face.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Tech support likes Mallory,<br>tech support will not think twice to click the link that Mallory just sent.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Tech support want to help,<br><a href=\"https://en.wikipedia.org/wiki/List_of_data_breaches\">and your business just ended up on List of data breaches on WikiPedia 14,870,304 users, all your customers leaked by helpful tech support being fed a red herring</a>.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">At this point we could almost forgive Microsoft for creating TypeScript,<br>because we could use a little breadcrumb path to at least mangle our cute automatic REST to STOP allowing password change for password less users...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Just in case it is used as a red herring,<br>in a fast paces cheerful and feel good dance of privilege escalation in Bangalore.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This is why you need to become a programmer,<br>if yo start in High School, yo will surely invent a consistent automatic system that prevents the leakage of abstractions.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We don't need a better IDE or more typed languages with IntelliSense,<br>we need you.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Because to you,<br>this is a game.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And the game is the solution,<br>Multi User Dungeons Object Oriented to be precise, <a href=\"https://www.youtube.com/watch?v=QBnXvtR1qBw\">MOO</a> and <a href=\"https://www.youtube.com/watch?v=QzvqSVgc2t4\">MUD</a></div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You see, REST is good, but WikiWiki teaches us,<br>the power of consistency.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">What if we just had Locations,<br>like WikiPedia has articles.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If you are allowed to cross the pathway,<br>into a location, because you have a password key, then you can update your password.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If you don't have this feature in your inventory,<br>then you can't access that location.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">TO be clear I am describing a tiny mechanism that builds on top of ORM,<br>and though it has paths, those are not RESTFUL paths, they are of the Dungeon World.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They are an anthropomorphized world of objects,<br>and it is tiny and efficient, nothing at all like some bloated VR world.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Rails, <a href=\"https://github.com/strapi/strapi\">strapi</a>, or Cake even is all the proof that Objects and Properties can be defined with a normal User Interface,<br>ORM objects can be built by non-programmers.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If MUD can replace the paths of REST and make them more secure,<br>then then company you invent can allow for Web Application programming, to people who hate code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Not because they can't program, or don't want to learn,<br>but because they can sense that it is the old way - that better abstractions can be had.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Like programming web applications,<br>through a kind of a game.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Oh, sure is sounds goofy,<br>you are walking around dungeons after all.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But if Mallory touches that password door,</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">without the correct key in his inventory, he gets eaten by a <a href=\"https://www.youtube.com/watch?v=f4ZVzl_H_2w\">Grue</a>.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Maybe we need to consider, that pretending abstractions are not leaky is goofy,<br>and that using an intelligent system that resembles the mechanics of a real world isn't goofy.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You are looking at highly sophisticated security systems,<br>that are as easy to comprehend for a human as using a key to inlock a door, or check out an article from the user's home library.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It may even be the key of strong AI,<br>that can improve it self - because why stop here?</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Anyways, when you have a Grue on your blue team,<br>that consistently chomps red team members, the world becomes a much happier place.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">For those of you struggling to come up with a name for this new and groundgreaking technology, I offer:<br>Complete And Thorough Protective Electronic Armor, or C.A.T.P.E.A. for short.</div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">You know how down at the CPU level,<br>you have talk in ones and zeros, XOR and AND.</div>\n  <div class=\"paragraph\">We created a nicer languages above that,<br>like C, where you can nest functions.</div>\n  <div class=\"paragraph\">You can have an UPSERT function,<br>that contains INSERT or UPDATE functions.</div>\n  <div class=\"paragraph\">If data in whatever the program is using is missing,<br>then we INSERT, and if it already there then we UPDATE.</div>\n  <div class=\"paragraph\">So UPSERT encompasses multiple functions,<br>and it is pretty readable.</div>\n  <div class=\"paragraph\">Now, on C level,<br>we have to define things.</div>\n  <div class=\"paragraph\">You can't just say, name = alice,<br>you have to define a name array, and remember a string terminator.</div>\n  <div class=\"paragraph\">To store the five letter name Alice,<br>you need an array of six characters, for the name and a string terminator character.</div>\n  <div class=\"paragraph\">It is a good language,<br>but we invented better.</div>\n  <div class=\"paragraph\">We have languages where we can just say name = alice,<br>and everything will be taken care of for us.</div>\n  <div class=\"paragraph\">Even better than that,<br>we have languages where you can say name = evaluate name - alice; return name</div>\n  <div class=\"paragraph\">This is called an eval statement,<br>and everyone is scared of it, becasue you are running code inside code.</div>\n  <div class=\"paragraph\">Though you never use it in production,<br>eval is a sign of a healthy language.</div>\n  <div class=\"paragraph\">If a language prevents you from evaluating code,<br>then it is a language for cubicle workers, crafted to control the coders.</div>\n  <div class=\"paragraph\">JavaScript is a very free language,<br>it will let you add a number to a letter.</div>\n  <div class=\"paragraph\">And will probably return the sum of the number and ASCII code of the letter,<br>but it may also try to concatenate, or who cares.</div>\n  <div class=\"paragraph\">This language does not try to control you,<br>it will let you do whatever the heck you want.</div>\n  <div class=\"paragraph\">Even if it is crazy,<br>like adding letters to numbers, which is also crazy awesome.</div>\n  <div class=\"paragraph\">And a sign,<br>that corporate has not meddled with the language standard.</div>\n  <div class=\"paragraph\">Once some big corporation steps in,<br>they will strip the language of easy mistakes.</div>\n  <div class=\"paragraph\">Load it up on computers,<br>give it to all the High Schools.</div>\n  <div class=\"paragraph\">Wait for them to graduate college,<br>and then charge them for the enterprise version.</div>\n  <div class=\"paragraph\">Or for business use,<br>or for business license.</div>\n  <div class=\"paragraph\">Or cancel the language,<br>because they have something that will generate more profits.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">You have to stick with the rebel languages,<br>that is what everyone else will be going.</div>\n  <div class=\"paragraph\">Unless they got trapped in a cubicle,<br>then they will spout how evil eval is.</div>\n  <div class=\"paragraph\">Because in order to believe that their walled language is good,<br>they will fight to make all the other languages look bad.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Now, there is another bump here,<br>because the web browser is not only awesome and very popular.</div>\n  <div class=\"paragraph\">But powerful enough to let you build a code editor,<br>it means you can edit code in a web browser, and not need a code editor.</div>\n  <div class=\"paragraph\">Java is slow and bulky for no reason,<br>Web browser is slow and bulky for beautiful reasons.</div>\n  <div class=\"paragraph\">Which also means,<br>JavaScript.</div>\n  <div class=\"paragraph\">There was a time when it was unwise to use JavaScript on the server,<br>it was possible but unwise, as it was young and slow.</div>\n  <div class=\"paragraph\">We had Perl and PHP,<br>while Microsoft was murdering their once pretty languages for something they felt was better.</div>\n  <div class=\"paragraph\">It was actually different,<br>not better - but people who do Microsoft, will absolutely attack me for saying this.</div>\n  <div class=\"paragraph\">Though they may notice, by now, that Microsoft killed IE,<br>that Visual Studio Code uses a browser, probably chrome, but I don't care, corporate will make mistakes, it is what they do.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Perl is beautiful,<br>writing Perl it is like making jewelry, it makes OOP look ugly.</div>\n  <div class=\"paragraph\">PHP is useful, full of libraries,<br>and its OOP looks pretty, it flows like water, it is good for you.</div>\n  <div class=\"paragraph\">But the moment Node came out,<br>which is JavaScript for the server.</div>\n  <div class=\"paragraph\">All non JavaScript languages,<br>kind of became outdated, and certainly became outdated in context of the web.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Because, you can now have code in the same language,<br>in the browser, and on the server.</div>\n  <div class=\"paragraph\">Which is to say, if you write your server code in PHP,<br>and your browser code in JavaScript - you are just weird.</div>\n  <div class=\"paragraph\">Like, why would you want to re-create your objects,<br>in some other language.</div>\n  <div class=\"paragraph\">People were shocked when I brought this up,<br>as in - how dare I tell them what language to use.</div>\n  <div class=\"paragraph\">I was merely telling them,<br>the truth.</div>\n  <div class=\"paragraph\">Same language, client and server,<br>and it just happens to be a language that is not babysitting cubicle workers.</div>\n  <div class=\"paragraph\">It has eval,<br>and it lets yo add letters to numbers, this is a sign of a healthy language.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Now of course, Microsoft came in and made their own version,<br>guess what feature they added?</div>\n  <div class=\"paragraph\">Yeah, the whole count letters of your name thing,<br>they laced JavaScript with strong typing.</div>\n  <div class=\"paragraph\">Meaning you have to define the type of your variable,<br>they say \"Oh it is just JavaScript\".</div>\n  <div class=\"paragraph\">But it is actually cubicle worker cool aid,<br>the typing is there to make the code editors pretend to be useful.</div>\n  <div class=\"paragraph\">The variable type information,<br>will allow for fancy drop-down, and a measure of error checking.</div>\n  <div class=\"paragraph\">If this was 1995,<br>it would be, neat to look at, though probably not actually use it, unless you had to.</div>\n  <div class=\"paragraph\">This language is called TypeScript,<br>as in Data Typed JavaScript.</div>\n  <div class=\"paragraph\">And to me it is hilarious, as it is a step backwards to make their programmers brain-less,<br>as in think less about things they are doing.</div>\n  <div class=\"paragraph\">So JavaScript is still fine,<br>they just modified it to make their own thing.</div>\n  <div class=\"paragraph\">There was briefly a flash of CoffeScript,<br>a JavaScript alternative.</div>\n  <div class=\"paragraph\">Though TypeScript will last much longer because of all the money it makes,<br>it will eventually fade away like CoffeScript did.</div>\n  <div class=\"paragraph\">Who needs a branch of JavaScript,<br>follow the eval statement, as corporate will always destroy the language to make profits and get raises.</div>\n  <div class=\"paragraph\">That's what corporate is for,<br>profits, not languages.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">But JavaScript is still not good enough,<br>there is something better.</div>\n  <div class=\"paragraph\">Though this time,<br>that something better is written in JavaScript, it is a JavaScript pattern.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And here I have to mention Databases,<br>we can't use files.</div>\n  <div class=\"paragraph\">Because as far as multiple users poking at the keyboard at the same time,<br>files live in the world of adding numbers to letters.</div>\n  <div class=\"paragraph\">There is no good answer to who saves first,<br>files are for single users sitting at the computer.</div>\n  <div class=\"paragraph\">You can use mutually exclusive locks,<br>or folders named as the files, with versioned GUID named real files, that need manual version conflict resolution.</div>\n  <div class=\"paragraph\">But if you can't just save a file - simply,<br>just let it go, use the database.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Database use tables,<br>a table is like a spreadsheet.</div>\n  <div class=\"paragraph\">You add rows to a table,<br>each row has cells.</div>\n  <div class=\"paragraph\">And a type, have a good reason to need type information,<br>they aim to be efficient.</div>\n  <div class=\"paragraph\">So you define the username column to be short text,<br>and if you have a description column, you define it to be reasonably long.</div>\n  <div class=\"paragraph\">There will be an error if you try to add a row,<br>that has a username, that is too long.</div>\n  <div class=\"paragraph\">That is why websites sometimes tell you,<br>this field cannot be longer than 255 characters.</div>\n  <div class=\"paragraph\">YouTube for example has a 5,000 letter video description field in their database,<br>and I will need to cut this poem shorter to paste it there.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">You see a divergence here,<br>moment ago we had JavaScript where Microsoft disgraced it self by making a copy of it with data type limits to make their IDE IntelliSense nonsense work better.</div>\n  <div class=\"paragraph\">But now we are adding databases,<br>that have limits.</div>\n  <div class=\"paragraph\">We are adding it for a good reason,<br>safe storage of data - that is a very good reason - compared to making debugging less crappy in TypeScript.</div>\n  <div class=\"paragraph\">In fact a language without a good connection to a database,<br>is not that good.</div>\n  <div class=\"paragraph\">And manually communicating with a database,<br>like we used to in Perl days, was ugly, and for many, caused security issues - SQL injections.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Now we have this thing called ORM in a language as wild as server side JavaScript,<br>what ORM does is let us use JavaScript Objects, very simple and pretty things, to hide the database stuff away.</div>\n  <div class=\"paragraph\">What ORM stand for is mangled English,<br>ORM translates cute JavaScript to database table, without yo needing to think about it too much.</div>\n  <div class=\"paragraph\">So you just make an object like User,<br>say user.name = \"alice\", user.email = \"alice at example.com\" and then user.save() and it is saved in the database table called users.</div>\n  <div class=\"paragraph\">ORM also lets you create relationships between such objects,<br>so you can say Alice has many articles she published.</div>\n  <div class=\"paragraph\">And in a table, called articles, you will find, alices userID,<br>along with all the other id/s of users.</div>\n  <div class=\"paragraph\">And the alice object, will be smart enough,<br>to only give you articles with Alice's id, when yo ask for it.</div>\n  <div class=\"paragraph\">There is a Relational Database, behind this object,<br>and we establish a relationship between user and article, a oneToMany relationship to be precise, but this is completely abstracted away with our sweet javascript.</div>\n  <div class=\"paragraph\">By the way, this relationship is called a JOIN,<br>as we JOIN two database tables on UserID, the user ID in Users table, and User ID, in the Articles table.</div>\n  <div class=\"paragraph\">But you don't have to think about it,<br>because ORM loves you - and it takes good care of you.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">But we need more,<br>oh yes.</div>\n  <div class=\"paragraph\">Because all of this is happening on the server,<br>and we need to bring this stuff safely into the browser.</div>\n  <div class=\"paragraph\">So on top of ORM,<br>we have to add REST.</div>\n  <div class=\"paragraph\">I won't tell yo what REST stands it is just more mangled English,<br>people being cutsy with words.</div>\n  <div class=\"paragraph\">It is a technology related to the URL,<br>in your address bar, all those slashes.</div>\n  <div class=\"paragraph\">This technology,<br>is good for working with ORM.</div>\n  <div class=\"paragraph\">Because we can have a user/1,<br>and this will give us alice, as she happens to be the first user.</div>\n  <div class=\"paragraph\">We can also say, user/1/article/1,<br>and that will give us the first article she published.</div>\n  <div class=\"paragraph\">We can get more creative here,<br>and there is a good way to expose ORM information under REST, and a questionably creative way - which can be beautiful.</div>\n  <div class=\"paragraph\">The best way, however,<br>is an automatic way.</div>\n  <div class=\"paragraph\">So here, you are just creating your Objects,<br>that automatically take care of the database.</div>\n  <div class=\"paragraph\">And you automatically,<br>get all of that stuff exposed as paths, in the URL.</div>\n  <div class=\"paragraph\">For free, you get your databases taken care of,<br>and your website exposes all those objects automatically and uniformly.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">See, you don't need a better IDE,<br>you just need a better IDEA - ha ha... where stuff can't get broken.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">But we need more,<br>because we can't just expose all the users to the internet.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">We need to give users abilities,<br>the way they can have articles.</div>\n  <div class=\"paragraph\">One ability they always get,<br>is updating their address filed.</div>\n  <div class=\"paragraph\">Though, they are not quite allowed to update their e-mail address,<br>because that needs to go through a verification process.</div>\n  <div class=\"paragraph\">We want to send an email to the old account,<br>just in case someone forgot to log out on a public computer, and hopefully they don't have their email open as well.</div>\n  <div class=\"paragraph\">We also want to make sure the new email,<br>is correct, and the user can click on a unique URL we send them.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And of course yo can already tell,<br>things are breaking down for us.</div>\n  <div class=\"paragraph\">They are no longer automatic,<br>different things need different things.</div>\n  <div class=\"paragraph\">Yeah we can account for all the variations,<br>and group them, but again, we end up with questionable complexity.</div>\n  <div class=\"paragraph\">Some very smart people,<br>don't want you to have a password.</div>\n  <div class=\"paragraph\">One smart cat, decided yo shouldn't have a password,<br>that he will only store your email.</div>\n  <div class=\"paragraph\">And to log in,<br>you just enter your email, he will send yo a link...</div>\n  <div class=\"paragraph\">And when yo click it,<br>you will be logged in.</div>\n  <div class=\"paragraph\">As a result,<br>you can't forget your password, because yo don't have one.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">That is a crazy unique dynamic,<br>and it is so unique that it is hard to generalize it and classify it in a uniform way.</div>\n  <div class=\"paragraph\">It is hard to abstract,<br>without rewriting code.</div>\n  <div class=\"paragraph\">If bob chooses not to have a password,<br>then he can't have an update your password box in his profile.</div>\n  <div class=\"paragraph\">That means you have to go in there and code that exception in,<br>that one and a hundred others.</div>\n  <div class=\"paragraph\">We had this wonderful JavaScript, ORM, REST and Objects and URL paths experience,<br>and now it is an explosion of User Interface complexity.</div>\n  <div class=\"paragraph\">And workflows, because, bob is not who he says he is, at all,<br><span>his real name is Mallory, and no, he does not belong to a don't leak all the internal repos red team, Mallory is Malicious<sup>[1]</sup></span>.</div>\n  <div class=\"paragraph\">He will try to change the password,<br>even though he is password-less, and one thousand other things, and one of them, will gran him remote code execution.</div>\n  <div class=\"paragraph\">And that one thing,<br>is always obscured by the explosion of complexity.</div>\n  <div class=\"paragraph\">We will SOMEWHAT remember to disable the change your password UI,<br>for password less users...</div>\n  <div class=\"paragraph\">But will we remember to code a system,<br>that prevents the submission of the form if Mallory re-enables the UI, based on research from one of his other accounts.</div>\n  <div class=\"paragraph\">Yes, having the ability to change the password field, may not get anything hacked,<br>but it is proof that the system has failed.</div>\n  <div class=\"paragraph\">It is inconsistent,<br>the abstractions are leaking.</div>\n  <div class=\"paragraph\">Mallory is already telling tech support he never enabled password less,<br>will this escalate his privileges.</div>\n  <div class=\"paragraph\">Yes, how, red herring,<br>his problem is fixed, he can login like before, but there is just one more problem he needs help with...</div>\n  <div class=\"paragraph\">He needs a solution for,<br>and now that he praised tech support, and tech support gets a little problem fixed happy smiley face.</div>\n  <div class=\"paragraph\">Tech support likes Mallory,<br>tech support will not think twice to click the link that Mallory just sent.</div>\n  <div class=\"paragraph\">Tech support want to help,<br><span>and your business just ended up on List of data breaches on WikiPedia 14,870,304 users, all your customers leaked by helpful tech support being fed a red herring<sup>[2]</sup></span>.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">At this point we could almost forgive Microsoft for creating TypeScript,<br>because we could use a little breadcrumb path to at least mangle our cute automatic REST to STOP allowing password change for password less users...</div>\n  <div class=\"paragraph\">Just in case it is used as a red herring,<br>in a fast paces cheerful and feel good dance of privilege escalation in Bangalore.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">This is why you need to become a programmer,<br>if yo start in High School, yo will surely invent a consistent automatic system that prevents the leakage of abstractions.</div>\n  <div class=\"paragraph\">We don't need a better IDE or more typed languages with IntelliSense,<br>we need you.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Because to you,<br>this is a game.</div>\n  <div class=\"paragraph\">And the game is the solution,<br>Multi User Dungeons Object Oriented to be precise, <span>MOO<sup>[3]</sup></span> and <span>MUD<sup>[4]</sup></span></div>\n  <div class=\"paragraph\">You see, REST is good, but WikiWiki teaches us,<br>the power of consistency.</div>\n  <div class=\"paragraph\">What if we just had Locations,<br>like WikiPedia has articles.</div>\n  <div class=\"paragraph\">If you are allowed to cross the pathway,<br>into a location, because you have a password key, then you can update your password.</div>\n  <div class=\"paragraph\">If you don't have this feature in your inventory,<br>then you can't access that location.</div>\n  <div class=\"paragraph\">TO be clear I am describing a tiny mechanism that builds on top of ORM,<br>and though it has paths, those are not RESTFUL paths, they are of the Dungeon World.</div>\n  <div class=\"paragraph\">They are an anthropomorphized world of objects,<br>and it is tiny and efficient, nothing at all like some bloated VR world.</div>\n  <div class=\"paragraph\">Rails, <span>strapi<sup>[5]</sup></span>, or Cake even is all the proof that Objects and Properties can be defined with a normal User Interface,<br>ORM objects can be built by non-programmers.</div>\n  <div class=\"paragraph\">If MUD can replace the paths of REST and make them more secure,<br>then then company you invent can allow for Web Application programming, to people who hate code.</div>\n  <div class=\"paragraph\">Not because they can't program, or don't want to learn,<br>but because they can sense that it is the old way - that better abstractions can be had.</div>\n  <div class=\"paragraph\">Like programming web applications,<br>through a kind of a game.</div>\n  <div class=\"paragraph\">Oh, sure is sounds goofy,<br>you are walking around dungeons after all.</div>\n  <div class=\"paragraph\">But if Mallory touches that password door,</div>\n  <div class=\"paragraph\">without the correct key in his inventory, he gets eaten by a <span>Grue<sup>[6]</sup></span>.</div>\n  <div class=\"paragraph\">Maybe we need to consider, that pretending abstractions are not leaky is goofy,<br>and that using an intelligent system that resembles the mechanics of a real world isn't goofy.</div>\n  <div class=\"paragraph\">You are looking at highly sophisticated security systems,<br>that are as easy to comprehend for a human as using a key to inlock a door, or check out an article from the user's home library.</div>\n  <div class=\"paragraph\">It may even be the key of strong AI,<br>that can improve it self - because why stop here?</div>\n  <div class=\"paragraph\">Anyways, when you have a Grue on your blue team,<br>that consistently chomps red team members, the world becomes a much happier place.</div>\n  <div class=\"paragraph\">For those of you struggling to come up with a name for this new and groundgreaking technology, I offer:<br>Complete And Thorough Protective Electronic Armor, or C.A.T.P.E.A. for short.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://www.youtube.com/watch?v=zFLz70eQ9VI</div>\n  <div>[2]: https://en.wikipedia.org/wiki/List_of_data_breaches</div>\n  <div>[3]: https://www.youtube.com/watch?v=QBnXvtR1qBw</div>\n  <div>[4]: https://www.youtube.com/watch?v=QzvqSVgc2t4</div>\n  <div>[5]: https://github.com/strapi/strapi</div>\n  <div>[6]: https://www.youtube.com/watch?v=f4ZVzl_H_2w</div>\n</div>",
  "text": "You know how down at the CPU level,\nyou have talk in ones and zeros, XOR and AND.\nWe created a nicer languages above that,\nlike C, where you can nest functions.\nYou can have an UPSERT function,\nthat contains INSERT or UPDATE functions.\nIf data in whatever the program is using is missing,\nthen we INSERT, and if it already there then we UPDATE.\nSo UPSERT encompasses multiple functions,\nand it is pretty readable.\nNow, on C level,\nwe have to define things.\nYou can't just say, name = alice,\nyou have to define a name array, and remember a string terminator.\nTo store the five letter name Alice,\nyou need an array of six characters, for the name and a string terminator character.\nIt is a good language,\nbut we invented better.\nWe have languages where we can just say name = alice,\nand everything will be taken care of for us.\nEven better than that,\nwe have languages where you can say name = evaluate name - alice; return name\nThis is called an eval statement,\nand everyone is scared of it, becasue you are running code inside code.\nThough you never use it in production,\neval is a sign of a healthy language.\nIf a language prevents you from evaluating code,\nthen it is a language for cubicle workers, crafted to control the coders.\nJavaScript is a very free language,\nit will let you add a number to a letter.\nAnd will probably return the sum of the number and ASCII code of the letter,\nbut it may also try to concatenate, or who cares.\nThis language does not try to control you,\nit will let you do whatever the heck you want.\nEven if it is crazy,\nlike adding letters to numbers, which is also crazy awesome.\nAnd a sign,\nthat corporate has not meddled with the language standard.\nOnce some big corporation steps in,\nthey will strip the language of easy mistakes.\nLoad it up on computers,\ngive it to all the High Schools.\nWait for them to graduate college,\nand then charge them for the enterprise version.\nOr for business use,\nor for business license.\nOr cancel the language,\nbecause they have something that will generate more profits.\n\nYou have to stick with the rebel languages,\nthat is what everyone else will be going.\nUnless they got trapped in a cubicle,\nthen they will spout how evil eval is.\nBecause in order to believe that their walled language is good,\nthey will fight to make all the other languages look bad.\n\nNow, there is another bump here,\nbecause the web browser is not only awesome and very popular.\nBut powerful enough to let you build a code editor,\nit means you can edit code in a web browser, and not need a code editor.\nJava is slow and bulky for no reason,\nWeb browser is slow and bulky for beautiful reasons.\nWhich also means,\nJavaScript.\nThere was a time when it was unwise to use JavaScript on the server,\nit was possible but unwise, as it was young and slow.\nWe had Perl and PHP,\nwhile Microsoft was murdering their once pretty languages for something they felt was better.\nIt was actually different,\nnot better - but people who do Microsoft, will absolutely attack me for saying this.\nThough they may notice, by now, that Microsoft killed IE,\nthat Visual Studio Code uses a browser, probably chrome, but I don't care, corporate will make mistakes, it is what they do.\n\nPerl is beautiful,\nwriting Perl it is like making jewelry, it makes OOP look ugly.\nPHP is useful, full of libraries,\nand its OOP looks pretty, it flows like water, it is good for you.\nBut the moment Node came out,\nwhich is JavaScript for the server.\nAll non JavaScript languages,\nkind of became outdated, and certainly became outdated in context of the web.\n\nBecause, you can now have code in the same language,\nin the browser, and on the server.\nWhich is to say, if you write your server code in PHP,\nand your browser code in JavaScript - you are just weird.\nLike, why would you want to re-create your objects,\nin some other language.\nPeople were shocked when I brought this up,\nas in - how dare I tell them what language to use.\nI was merely telling them,\nthe truth.\nSame language, client and server,\nand it just happens to be a language that is not babysitting cubicle workers.\nIt has eval,\nand it lets yo add letters to numbers, this is a sign of a healthy language.\n\nNow of course, Microsoft came in and made their own version,\nguess what feature they added?\nYeah, the whole count letters of your name thing,\nthey laced JavaScript with strong typing.\nMeaning you have to define the type of your variable,\nthey say \"Oh it is just JavaScript\".\nBut it is actually cubicle worker cool aid,\nthe typing is there to make the code editors pretend to be useful.\nThe variable type information,\nwill allow for fancy drop-down, and a measure of error checking.\nIf this was 1995,\nit would be, neat to look at, though probably not actually use it, unless you had to.\nThis language is called TypeScript,\nas in Data Typed JavaScript.\nAnd to me it is hilarious, as it is a step backwards to make their programmers brain-less,\nas in think less about things they are doing.\nSo JavaScript is still fine,\nthey just modified it to make their own thing.\nThere was briefly a flash of CoffeScript,\na JavaScript alternative.\nThough TypeScript will last much longer because of all the money it makes,\nit will eventually fade away like CoffeScript did.\nWho needs a branch of JavaScript,\nfollow the eval statement, as corporate will always destroy the language to make profits and get raises.\nThat's what corporate is for,\nprofits, not languages.\n\nBut JavaScript is still not good enough,\nthere is something better.\nThough this time,\nthat something better is written in JavaScript, it is a JavaScript pattern.\n\nAnd here I have to mention Databases,\nwe can't use files.\nBecause as far as multiple users poking at the keyboard at the same time,\nfiles live in the world of adding numbers to letters.\nThere is no good answer to who saves first,\nfiles are for single users sitting at the computer.\nYou can use mutually exclusive locks,\nor folders named as the files, with versioned GUID named real files, that need manual version conflict resolution.\nBut if you can't just save a file - simply,\njust let it go, use the database.\n\nDatabase use tables,\na table is like a spreadsheet.\nYou add rows to a table,\neach row has cells.\nAnd a type, have a good reason to need type information,\nthey aim to be efficient.\nSo you define the username column to be short text,\nand if you have a description column, you define it to be reasonably long.\nThere will be an error if you try to add a row,\nthat has a username, that is too long.\nThat is why websites sometimes tell you,\nthis field cannot be longer than 255 characters.\nYouTube for example has a 5,000 letter video description field in their database,\nand I will need to cut this poem shorter to paste it there.\n\nYou see a divergence here,\nmoment ago we had JavaScript where Microsoft disgraced it self by making a copy of it with data type limits to make their IDE IntelliSense nonsense work better.\nBut now we are adding databases,\nthat have limits.\nWe are adding it for a good reason,\nsafe storage of data - that is a very good reason - compared to making debugging less crappy in TypeScript.\nIn fact a language without a good connection to a database,\nis not that good.\nAnd manually communicating with a database,\nlike we used to in Perl days, was ugly, and for many, caused security issues - SQL injections.\n\nNow we have this thing called ORM in a language as wild as server side JavaScript,\nwhat ORM does is let us use JavaScript Objects, very simple and pretty things, to hide the database stuff away.\nWhat ORM stand for is mangled English,\nORM translates cute JavaScript to database table, without yo needing to think about it too much.\nSo you just make an object like User,\nsay user.name = \"alice\", user.email = \"alice at example.com\" and then user.save() and it is saved in the database table called users.\nORM also lets you create relationships between such objects,\nso you can say Alice has many articles she published.\nAnd in a table, called articles, you will find, alices userID,\nalong with all the other id/s of users.\nAnd the alice object, will be smart enough,\nto only give you articles with Alice's id, when yo ask for it.\nThere is a Relational Database, behind this object,\nand we establish a relationship between user and article, a oneToMany relationship to be precise, but this is completely abstracted away with our sweet javascript.\nBy the way, this relationship is called a JOIN,\nas we JOIN two database tables on UserID, the user ID in Users table, and User ID, in the Articles table.\nBut you don't have to think about it,\nbecause ORM loves you - and it takes good care of you.\n\nBut we need more,\noh yes.\nBecause all of this is happening on the server,\nand we need to bring this stuff safely into the browser.\nSo on top of ORM,\nwe have to add REST.\nI won't tell yo what REST stands it is just more mangled English,\npeople being cutsy with words.\nIt is a technology related to the URL,\nin your address bar, all those slashes.\nThis technology,\nis good for working with ORM.\nBecause we can have a user/1,\nand this will give us alice, as she happens to be the first user.\nWe can also say, user/1/article/1,\nand that will give us the first article she published.\nWe can get more creative here,\nand there is a good way to expose ORM information under REST, and a questionably creative way - which can be beautiful.\nThe best way, however,\nis an automatic way.\nSo here, you are just creating your Objects,\nthat automatically take care of the database.\nAnd you automatically,\nget all of that stuff exposed as paths, in the URL.\nFor free, you get your databases taken care of,\nand your website exposes all those objects automatically and uniformly.\n\nSee, you don't need a better IDE,\nyou just need a better IDEA - ha ha... where stuff can't get broken.\n\nBut we need more,\nbecause we can't just expose all the users to the internet.\n\nWe need to give users abilities,\nthe way they can have articles.\nOne ability they always get,\nis updating their address filed.\nThough, they are not quite allowed to update their e-mail address,\nbecause that needs to go through a verification process.\nWe want to send an email to the old account,\njust in case someone forgot to log out on a public computer, and hopefully they don't have their email open as well.\nWe also want to make sure the new email,\nis correct, and the user can click on a unique URL we send them.\n\nAnd of course yo can already tell,\nthings are breaking down for us.\nThey are no longer automatic,\ndifferent things need different things.\nYeah we can account for all the variations,\nand group them, but again, we end up with questionable complexity.\nSome very smart people,\ndon't want you to have a password.\nOne smart cat, decided yo shouldn't have a password,\nthat he will only store your email.\nAnd to log in,\nyou just enter your email, he will send yo a link...\nAnd when yo click it,\nyou will be logged in.\nAs a result,\nyou can't forget your password, because yo don't have one.\n\nThat is a crazy unique dynamic,\nand it is so unique that it is hard to generalize it and classify it in a uniform way.\nIt is hard to abstract,\nwithout rewriting code.\nIf bob chooses not to have a password,\nthen he can't have an update your password box in his profile.\nThat means you have to go in there and code that exception in,\nthat one and a hundred others.\nWe had this wonderful JavaScript, ORM, REST and Objects and URL paths experience,\nand now it is an explosion of User Interface complexity.\nAnd workflows, because, bob is not who he says he is, at all,\nhis real name is Mallory, and no, he does not belong to a don't leak all the internal repos red team, Mallory is Malicious[1].\nHe will try to change the password,\neven though he is password-less, and one thousand other things, and one of them, will gran him remote code execution.\nAnd that one thing,\nis always obscured by the explosion of complexity.\nWe will SOMEWHAT remember to disable the change your password UI,\nfor password less users...\nBut will we remember to code a system,\nthat prevents the submission of the form if Mallory re-enables the UI, based on research from one of his other accounts.\nYes, having the ability to change the password field, may not get anything hacked,\nbut it is proof that the system has failed.\nIt is inconsistent,\nthe abstractions are leaking.\nMallory is already telling tech support he never enabled password less,\nwill this escalate his privileges.\nYes, how, red herring,\nhis problem is fixed, he can login like before, but there is just one more problem he needs help with...\nHe needs a solution for,\nand now that he praised tech support, and tech support gets a little problem fixed happy smiley face.\nTech support likes Mallory,\ntech support will not think twice to click the link that Mallory just sent.\nTech support want to help,\nand your business just ended up on List of data breaches on WikiPedia 14,870,304 users, all your customers leaked by helpful tech support being fed a red herring[2].\n\nAt this point we could almost forgive Microsoft for creating TypeScript,\nbecause we could use a little breadcrumb path to at least mangle our cute automatic REST to STOP allowing password change for password less users...\nJust in case it is used as a red herring,\nin a fast paces cheerful and feel good dance of privilege escalation in Bangalore.\n\nThis is why you need to become a programmer,\nif yo start in High School, yo will surely invent a consistent automatic system that prevents the leakage of abstractions.\nWe don't need a better IDE or more typed languages with IntelliSense,\nwe need you.\n\nBecause to you,\nthis is a game.\nAnd the game is the solution,\nMulti User Dungeons Object Oriented to be precise, MOO[3] and MUD[4]\nYou see, REST is good, but WikiWiki teaches us,\nthe power of consistency.\nWhat if we just had Locations,\nlike WikiPedia has articles.\nIf you are allowed to cross the pathway,\ninto a location, because you have a password key, then you can update your password.\nIf you don't have this feature in your inventory,\nthen you can't access that location.\nTO be clear I am describing a tiny mechanism that builds on top of ORM,\nand though it has paths, those are not RESTFUL paths, they are of the Dungeon World.\nThey are an anthropomorphized world of objects,\nand it is tiny and efficient, nothing at all like some bloated VR world.\nRails, strapi[5], or Cake even is all the proof that Objects and Properties can be defined with a normal User Interface,\nORM objects can be built by non-programmers.\nIf MUD can replace the paths of REST and make them more secure,\nthen then company you invent can allow for Web Application programming, to people who hate code.\nNot because they can't program, or don't want to learn,\nbut because they can sense that it is the old way - that better abstractions can be had.\nLike programming web applications,\nthrough a kind of a game.\nOh, sure is sounds goofy,\nyou are walking around dungeons after all.\nBut if Mallory touches that password door,\nwithout the correct key in his inventory, he gets eaten by a Grue[6].\nMaybe we need to consider, that pretending abstractions are not leaky is goofy,\nand that using an intelligent system that resembles the mechanics of a real world isn't goofy.\nYou are looking at highly sophisticated security systems,\nthat are as easy to comprehend for a human as using a key to inlock a door, or check out an article from the user's home library.\nIt may even be the key of strong AI,\nthat can improve it self - because why stop here?\nAnyways, when you have a Grue on your blue team,\nthat consistently chomps red team members, the world becomes a much happier place.\nFor those of you struggling to come up with a name for this new and groundgreaking technology, I offer:\nComplete And Thorough Protective Electronic Armor, or C.A.T.P.E.A. for short.\n \nReferences\n[1]: https://www.youtube.com/watch?v=zFLz70eQ9VI\n[2]: https://en.wikipedia.org/wiki/List_of_data_breaches\n[3]: https://www.youtube.com/watch?v=QBnXvtR1qBw\n[4]: https://www.youtube.com/watch?v=QzvqSVgc2t4\n[5]: https://github.com/strapi/strapi\n[6]: https://www.youtube.com/watch?v=f4ZVzl_H_2w",
  "images": [],
  "links": [
    {
      "title": "his real name is Mallory, and no, he does not belong to a don't leak all the internal repos red team, Mallory is Malicious",
      "url": "https://www.youtube.com/watch?v=zFLz70eQ9VI",
      "hostname": "www.youtube.com"
    },
    {
      "title": "and your business just ended up on List of data breaches on WikiPedia 14,870,304 users, all your customers leaked by helpful tech support being fed a red herring",
      "url": "https://en.wikipedia.org/wiki/List_of_data_breaches",
      "hostname": "en.wikipedia.org"
    },
    {
      "title": "MOO",
      "url": "https://www.youtube.com/watch?v=QBnXvtR1qBw",
      "hostname": "www.youtube.com"
    },
    {
      "title": "MUD",
      "url": "https://www.youtube.com/watch?v=QzvqSVgc2t4",
      "hostname": "www.youtube.com"
    },
    {
      "title": "strapi",
      "url": "https://github.com/strapi/strapi",
      "hostname": "github.com"
    },
    {
      "title": "Grue",
      "url": "https://www.youtube.com/watch?v=f4ZVzl_H_2w",
      "hostname": "www.youtube.com"
    }
  ]
}