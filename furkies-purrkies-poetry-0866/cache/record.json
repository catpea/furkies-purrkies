{
  "name": "furkies-purrkies-poetry-0866",
  "id": "furkies-purrkies-poetry-0866",
  "title": "The Fanciful Event Emitter: A Super Strange Programming Poem",
  "date": "2022-07-14T23:31:32.311Z",
  "image": "poetry-0866-illustration.jpg",
  "artwork": "https://catpea.com",
  "audio": "poetry-0866.mp3",
  "guid": "fdc88791-19b7-4375-8c2c-4aeaa7ecb4c3",
  "html": "<div class=\"section\">\n  <p>Event happens when you click a mouse,<br>it is called the click event.</p>\n  <p>The event comes with some information,<br>and that information is just named values, like x=5, or user=alice.</p>\n  <p>Emitter means that we can emit events,<br>we can say emit alert “Hello!”</p>\n  <p>A Listener must be setup,<br>to hear events.</p>\n  <p>Some Event Emitter libraries,<br>allow you to create wildcards, so you can hear all or some events.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And one time I’ve read someone was challenged<br>to create a simple program by their potential employer.</p>\n  <p>They used Event Emitter,<br>to create this beautiful web of information.</p>\n  <p>But the company,<br>hated it.</p>\n  <p>He was supposed to do it the most minimalist way,<br>so that other employees would know what is going on.</p>\n  <p>Bare bone minimalism<br>shows that the person understands the technologies.</p>\n  <p>And knows how to use them,<br>in a way that others usually use them.</p>\n  <p>Instead he invented this whole new abstraction,<br>that meant other programmers needed to learn to understand it.</p>\n  <p>So he needed to program their way,<br>so that they could easily read the code.</p>\n  <p>During the interview doing things the hard way,<br>shows that a person did not skip learning about them.</p>\n  <p>He was so surprised,<br>he asked about it on the internet.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>On the other hand,<br>people invent extra technologies.</p>\n  <p>MooTools, jQuery, Backbone,<br>and the more modern React, Vue, Svelte, and helpers like lodash or PouchDB.</p>\n  <p>Everyone loves that,<br>as these are real time savers.</p>\n  <p>Now I think this person could have,<br>created a time saver.</p>\n  <p>I think that company was mad for not replying to him,<br>and just full of brainless yes-people anyway.</p>\n  <p>I wouldn't even touch an interview like that,<br>my knowledge is vast and carefully compiled since I was nine.</p>\n  <p>I don’t want anybody,<br>to insult me.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Having said that, this gentleman who failed the interview,<br>picked the correct technology.</p>\n  <p>A nice clean EventEmitter is probably the most powerful way,<br>to write real code.</p>\n  <p>I f you write your entire application EventEmitter first,<br>it becomes like a dream, it is like thought programming, a digital day dream.</p>\n  <p>You may only have the scaffold made out of listeners,<br>some simple if statements, and emitters.</p>\n  <p>But oh wow, you can just send a packet down the pipe,<br>and watch it travel thorough he web.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>It gets better, because if you use simple visual programming,<br>or just <a href=\"https://js.cytoscape.org/\">graph visualization</a>, as in graph theory (very simple).</p>\n  <p>Then, you can see the web,<br>the event network of your program.</p>\n  <p>Unlike classical visual programming,<br>where what you get is what you drag and drop into the canvas.</p>\n  <p>Graph theory, graph database, web socket based even communication between clinet and server,<br>and a code generator that will make the EventEmitter code perfect, will all go a long way.</p>\n  <p>A graph database has two concepts, one is that of an node, vertex, bag or box,<br>and an edge, or wire, just wire that connects the boxes.</p>\n  <p>Both wire and box, have a unique id,<br>so you can use that as a filename or object name or row ID.</p>\n  <p>Just let the graph live in RAM,<br>and save only what changes, or save changes to a log, very simple.</p>\n  <p>It is all cut up into tiny bits by default,<br>where graph databases are concerned.</p>\n  <p>A graph’s circles and lines,<br>are perfect for visualising EventEmitters with their wires and boxes.</p>\n  <p>If we allow ourselves to think of a Listener,<br>as a person with a radio.</p>\n  <p>We might as well put them next to a pipe,<br>that will transform whatever they send through it.</p>\n  <p>So if the Event Listener is a start of a chain of operations,<br>then those operations can be visually represented with more circles.</p>\n  <p>A listener is a circle outline, the chain of functions are filled circles,<br>because functions is where the code sits.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>And here we meet our nemesis, the branching if statement,<br>and just as quickly we turn them into just another EventListener with a chain of functions.</p>\n  <p>It would be hard to track all the code, for all the different listeners,<br>but since we are visualizing it graphically, that is not a problem.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>As to tracking variables, that is not even an issue,<br>all the variables are listed by just clicking on the listener, the data is in the event.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>As always such fascinating curiosities,<br>are a great way to learn and practice programming.</p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Event happens when you click a mouse,<br>it is called the click event.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The event comes with some information,<br>and that information is just named values, like x=5, or user=alice.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Emitter means that we can emit events,<br>we can say emit alert “Hello!”</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A Listener must be setup,<br>to hear events.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Some Event Emitter libraries,<br>allow you to create wildcards, so you can hear all or some events.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And one time I’ve read someone was challenged<br>to create a simple program by their potential employer.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They used Event Emitter,<br>to create this beautiful web of information.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But the company,<br>hated it.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">He was supposed to do it the most minimalist way,<br>so that other employees would know what is going on.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Bare bone minimalism<br>shows that the person understands the technologies.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And knows how to use them,<br>in a way that others usually use them.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Instead he invented this whole new abstraction,<br>that meant other programmers needed to learn to understand it.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So he needed to program their way,<br>so that they could easily read the code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">During the interview doing things the hard way,<br>shows that a person did not skip learning about them.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">He was so surprised,<br>he asked about it on the internet.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">On the other hand,<br>people invent extra technologies.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">MooTools, jQuery, Backbone,<br>and the more modern React, Vue, Svelte, and helpers like lodash or PouchDB.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Everyone loves that,<br>as these are real time savers.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Now I think this person could have,<br>created a time saver.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I think that company was mad for not replying to him,<br>and just full of brainless yes-people anyway.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I wouldn't even touch an interview like that,<br>my knowledge is vast and carefully compiled since I was nine.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I don’t want anybody,<br>to insult me.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Having said that, this gentleman who failed the interview,<br>picked the correct technology.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A nice clean EventEmitter is probably the most powerful way,<br>to write real code.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I f you write your entire application EventEmitter first,<br>it becomes like a dream, it is like thought programming, a digital day dream.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You may only have the scaffold made out of listeners,<br>some simple if statements, and emitters.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But oh wow, you can just send a packet down the pipe,<br>and watch it travel thorough he web.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It gets better, because if you use simple visual programming,<br>or just <a href=\"https://js.cytoscape.org/\">graph visualization</a>, as in graph theory (very simple).</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Then, you can see the web,<br>the event network of your program.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Unlike classical visual programming,<br>where what you get is what you drag and drop into the canvas.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Graph theory, graph database, web socket based even communication between clinet and server,<br>and a code generator that will make the EventEmitter code perfect, will all go a long way.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A graph database has two concepts, one is that of an node, vertex, bag or box,<br>and an edge, or wire, just wire that connects the boxes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Both wire and box, have a unique id,<br>so you can use that as a filename or object name or row ID.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Just let the graph live in RAM,<br>and save only what changes, or save changes to a log, very simple.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is all cut up into tiny bits by default,<br>where graph databases are concerned.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A graph’s circles and lines,<br>are perfect for visualising EventEmitters with their wires and boxes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">If we allow ourselves to think of a Listener,<br>as a person with a radio.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We might as well put them next to a pipe,<br>that will transform whatever they send through it.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So if the Event Listener is a start of a chain of operations,<br>then those operations can be visually represented with more circles.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A listener is a circle outline, the chain of functions are filled circles,<br>because functions is where the code sits.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And here we meet our nemesis, the branching if statement,<br>and just as quickly we turn them into just another EventListener with a chain of functions.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It would be hard to track all the code, for all the different listeners,<br>but since we are visualizing it graphically, that is not a problem.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">As to tracking variables, that is not even an issue,<br>all the variables are listed by just clicking on the listener, the data is in the event.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">As always such fascinating curiosities,<br>are a great way to learn and practice programming.</div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Event happens when you click a mouse,<br>it is called the click event.</div>\n  <div class=\"paragraph\">The event comes with some information,<br>and that information is just named values, like x=5, or user=alice.</div>\n  <div class=\"paragraph\">Emitter means that we can emit events,<br>we can say emit alert “Hello!”</div>\n  <div class=\"paragraph\">A Listener must be setup,<br>to hear events.</div>\n  <div class=\"paragraph\">Some Event Emitter libraries,<br>allow you to create wildcards, so you can hear all or some events.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And one time I’ve read someone was challenged<br>to create a simple program by their potential employer.</div>\n  <div class=\"paragraph\">They used Event Emitter,<br>to create this beautiful web of information.</div>\n  <div class=\"paragraph\">But the company,<br>hated it.</div>\n  <div class=\"paragraph\">He was supposed to do it the most minimalist way,<br>so that other employees would know what is going on.</div>\n  <div class=\"paragraph\">Bare bone minimalism<br>shows that the person understands the technologies.</div>\n  <div class=\"paragraph\">And knows how to use them,<br>in a way that others usually use them.</div>\n  <div class=\"paragraph\">Instead he invented this whole new abstraction,<br>that meant other programmers needed to learn to understand it.</div>\n  <div class=\"paragraph\">So he needed to program their way,<br>so that they could easily read the code.</div>\n  <div class=\"paragraph\">During the interview doing things the hard way,<br>shows that a person did not skip learning about them.</div>\n  <div class=\"paragraph\">He was so surprised,<br>he asked about it on the internet.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">On the other hand,<br>people invent extra technologies.</div>\n  <div class=\"paragraph\">MooTools, jQuery, Backbone,<br>and the more modern React, Vue, Svelte, and helpers like lodash or PouchDB.</div>\n  <div class=\"paragraph\">Everyone loves that,<br>as these are real time savers.</div>\n  <div class=\"paragraph\">Now I think this person could have,<br>created a time saver.</div>\n  <div class=\"paragraph\">I think that company was mad for not replying to him,<br>and just full of brainless yes-people anyway.</div>\n  <div class=\"paragraph\">I wouldn't even touch an interview like that,<br>my knowledge is vast and carefully compiled since I was nine.</div>\n  <div class=\"paragraph\">I don’t want anybody,<br>to insult me.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Having said that, this gentleman who failed the interview,<br>picked the correct technology.</div>\n  <div class=\"paragraph\">A nice clean EventEmitter is probably the most powerful way,<br>to write real code.</div>\n  <div class=\"paragraph\">I f you write your entire application EventEmitter first,<br>it becomes like a dream, it is like thought programming, a digital day dream.</div>\n  <div class=\"paragraph\">You may only have the scaffold made out of listeners,<br>some simple if statements, and emitters.</div>\n  <div class=\"paragraph\">But oh wow, you can just send a packet down the pipe,<br>and watch it travel thorough he web.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">It gets better, because if you use simple visual programming,<br>or just <span>graph visualization<sup>[1]</sup></span>, as in graph theory (very simple).</div>\n  <div class=\"paragraph\">Then, you can see the web,<br>the event network of your program.</div>\n  <div class=\"paragraph\">Unlike classical visual programming,<br>where what you get is what you drag and drop into the canvas.</div>\n  <div class=\"paragraph\">Graph theory, graph database, web socket based even communication between clinet and server,<br>and a code generator that will make the EventEmitter code perfect, will all go a long way.</div>\n  <div class=\"paragraph\">A graph database has two concepts, one is that of an node, vertex, bag or box,<br>and an edge, or wire, just wire that connects the boxes.</div>\n  <div class=\"paragraph\">Both wire and box, have a unique id,<br>so you can use that as a filename or object name or row ID.</div>\n  <div class=\"paragraph\">Just let the graph live in RAM,<br>and save only what changes, or save changes to a log, very simple.</div>\n  <div class=\"paragraph\">It is all cut up into tiny bits by default,<br>where graph databases are concerned.</div>\n  <div class=\"paragraph\">A graph’s circles and lines,<br>are perfect for visualising EventEmitters with their wires and boxes.</div>\n  <div class=\"paragraph\">If we allow ourselves to think of a Listener,<br>as a person with a radio.</div>\n  <div class=\"paragraph\">We might as well put them next to a pipe,<br>that will transform whatever they send through it.</div>\n  <div class=\"paragraph\">So if the Event Listener is a start of a chain of operations,<br>then those operations can be visually represented with more circles.</div>\n  <div class=\"paragraph\">A listener is a circle outline, the chain of functions are filled circles,<br>because functions is where the code sits.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">And here we meet our nemesis, the branching if statement,<br>and just as quickly we turn them into just another EventListener with a chain of functions.</div>\n  <div class=\"paragraph\">It would be hard to track all the code, for all the different listeners,<br>but since we are visualizing it graphically, that is not a problem.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">As to tracking variables, that is not even an issue,<br>all the variables are listed by just clicking on the listener, the data is in the event.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">As always such fascinating curiosities,<br>are a great way to learn and practice programming.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://js.cytoscape.org/</div>\n</div>",
  "text": "Event happens when you click a mouse,\nit is called the click event.\nThe event comes with some information,\nand that information is just named values, like x=5, or user=alice.\nEmitter means that we can emit events,\nwe can say emit alert “Hello!”\nA Listener must be setup,\nto hear events.\nSome Event Emitter libraries,\nallow you to create wildcards, so you can hear all or some events.\n\nAnd one time I’ve read someone was challenged\nto create a simple program by their potential employer.\nThey used Event Emitter,\nto create this beautiful web of information.\nBut the company,\nhated it.\nHe was supposed to do it the most minimalist way,\nso that other employees would know what is going on.\nBare bone minimalism\nshows that the person understands the technologies.\nAnd knows how to use them,\nin a way that others usually use them.\nInstead he invented this whole new abstraction,\nthat meant other programmers needed to learn to understand it.\nSo he needed to program their way,\nso that they could easily read the code.\nDuring the interview doing things the hard way,\nshows that a person did not skip learning about them.\nHe was so surprised,\nhe asked about it on the internet.\n\nOn the other hand,\npeople invent extra technologies.\nMooTools, jQuery, Backbone,\nand the more modern React, Vue, Svelte, and helpers like lodash or PouchDB.\nEveryone loves that,\nas these are real time savers.\nNow I think this person could have,\ncreated a time saver.\nI think that company was mad for not replying to him,\nand just full of brainless yes-people anyway.\nI wouldn't even touch an interview like that,\nmy knowledge is vast and carefully compiled since I was nine.\nI don’t want anybody,\nto insult me.\n\nHaving said that, this gentleman who failed the interview,\npicked the correct technology.\nA nice clean EventEmitter is probably the most powerful way,\nto write real code.\nI f you write your entire application EventEmitter first,\nit becomes like a dream, it is like thought programming, a digital day dream.\nYou may only have the scaffold made out of listeners,\nsome simple if statements, and emitters.\nBut oh wow, you can just send a packet down the pipe,\nand watch it travel thorough he web.\n\nIt gets better, because if you use simple visual programming,\nor just graph visualization[1], as in graph theory (very simple).\nThen, you can see the web,\nthe event network of your program.\nUnlike classical visual programming,\nwhere what you get is what you drag and drop into the canvas.\nGraph theory, graph database, web socket based even communication between clinet and server,\nand a code generator that will make the EventEmitter code perfect, will all go a long way.\nA graph database has two concepts, one is that of an node, vertex, bag or box,\nand an edge, or wire, just wire that connects the boxes.\nBoth wire and box, have a unique id,\nso you can use that as a filename or object name or row ID.\nJust let the graph live in RAM,\nand save only what changes, or save changes to a log, very simple.\nIt is all cut up into tiny bits by default,\nwhere graph databases are concerned.\nA graph’s circles and lines,\nare perfect for visualising EventEmitters with their wires and boxes.\nIf we allow ourselves to think of a Listener,\nas a person with a radio.\nWe might as well put them next to a pipe,\nthat will transform whatever they send through it.\nSo if the Event Listener is a start of a chain of operations,\nthen those operations can be visually represented with more circles.\nA listener is a circle outline, the chain of functions are filled circles,\nbecause functions is where the code sits.\n\nAnd here we meet our nemesis, the branching if statement,\nand just as quickly we turn them into just another EventListener with a chain of functions.\nIt would be hard to track all the code, for all the different listeners,\nbut since we are visualizing it graphically, that is not a problem.\n\nAs to tracking variables, that is not even an issue,\nall the variables are listed by just clicking on the listener, the data is in the event.\n\nAs always such fascinating curiosities,\nare a great way to learn and practice programming.\n \nReferences\n[1]: https://js.cytoscape.org/",
  "images": [],
  "links": [
    {
      "title": "graph visualization",
      "url": "https://js.cytoscape.org/",
      "hostname": "js.cytoscape.org"
    }
  ]
}