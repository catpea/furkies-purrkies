{
  "name": "furkies-purrkies-poetry-0698",
  "id": "furkies-purrkies-poetry-0698",
  "title": "Pipe Programming: A Look At Object Passing And Transformation",
  "date": "2022-01-28T03:11:49.666Z",
  "image": "poetry-0698-illustration.jpg",
  "artwork": "https://catpea.com",
  "audio": "poetry-0698.mp3",
  "guid": "487ea9ea-c75b-4771-9a92-3dd425857c88",
  "html": "<div class=\"section\">\n  <p>A pipe is a connection between two programs,<br>and through that pipe, we send an object that is altered to serve some final purpose.</p>\n  <p>Imagine you checking email,<br>you create a pipe between your computer and the email server.</p>\n  <p>And then you send a request object,<br>with your password and user name.</p>\n  <p>The email server,<br>will respond with an object that contains emails.</p>\n  <p>So we have programs connected by pipes,<br>through which we send objects.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>When you are writing a program,<br>you are creating a pipework that connects programs.</p>\n  <p>And then when your user uses your program,<br>as they interact with buttons, they send objects down the pipes you created.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>While you can make a beautiful little program,<br>that takes good care of user-names and passwords, including their validation.</p>\n  <p>You don't have to do it,<br>there is a crude and perfectly functional way to do it with just the basic operations.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>When a user clicks login,<br>and initializes an object down the login to email pipe.</p>\n  <p>Rather than doing something special for user name and password,<br>simply inject a new property to the object that the user initialized.</p>\n  <p>The first time you inject user-name,<br>second time you inject password.</p>\n  <p>This is a generic injection program,<br>where you specify the name of new properties.</p>\n  <p>And then you follow up with a pop-up box,<br>that knows to ask for all the properties traveling down the pipe.</p>\n  <p>Nothing here is related to passwords,<br>it is just properties and a standard form.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>When working with pipes in a graphic environment,<br>such as Node-RED.</p>\n  <p>You can group the generic operations together,<br>and save them as a program called a sub flow.</p>\n  <p>The name of this sub-flow would be ask for password,<br>It is perfectly reusable.</p>\n  <p>Any object sent through it,<br>will receive an injection of username and password fields, or variables.</p>\n  <p>And a automated popup,<br>will force the user to to fill in those two bits of information.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Pipes, Programs, Objects,<br>those three crazy simple things is all it takes to make programs.</p>\n  <p>This simplicity also reinforces,<br>efficiency.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>In more advanced programs like video editors that use pipes,<br>Blender is a good example.</p>\n  <p>Pipes enforce the idea that a video is never sent whole,<br>but only one frame at a time.</p>\n  <p>The video can be 100 terabytes,<br>but Blender will only take the memory needed for one frame, not the whole video.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>This is what the word streaming means,<br>you are streaming a frame at a time down a connection pipe.</p>\n  <p>Rather than the user downloading the whole video,<br>this can be for efficiency reasons, or for the fact that the rest of the video does not yet exist.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>The black window command line that you see hackers use on TV,<br>is so powerful because it uses pipes.</p>\n  <p>It uses the actual pipe character to separate programs,<br>and objects tend to be lines in a file.</p>\n  <p>For example, to guess a weak password,<br>a hacker would have a common passwords dictionary file.</p>\n  <p>And it would be just one password per line,<br>they would then pipe the passwords to a login program.</p>\n  <p>Each line in a file is treated as an object,<br>the program reading the file would send objects one at a time to the program logging in.</p>\n  <p>With a successful login,<br>the login program would break the pipe and exit with a happy message.</p>\n  <p>And none of the other passwords would continue being streamed,<br>as the pipe is broken, and everything exits, including the program sending the passwords.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>There are many ways that the concept of Program, Pipe, and Object are represented,<br>there are as many variations of this idea as there are programs that make use of it.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Old school programmers, don't like pipes,<br>they prefer to load an entire movie into memory, process it and be done with it.</p>\n  <p>This is not a terrible idea,<br>operations on a video file in RAM are much, much faster then sending frames at a time through pipes.</p>\n  <p>Others hate the idea of just three things,<br>Program, Pipe, and Object.</p>\n  <p>They are used to creating entire Virtual Systems,<br>with hundred of objects, including a Password Object, User name Object, a Login Object, that contains both...</p>\n  <p>And even a remote server object,<br>that is a virtual representation of the mail server.</p>\n  <p>Just having Program, Pipe, and Object,<br>is terrifying to them.</p>\n  <p>Having just three things,<br>allows for those standard operations like Inject, or Branch depending on whether the login failed or succeed.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>ffmpeg uses pipes in the single most terrifying way,<br>they construct trees of pipes, or meshes really.</p>\n  <p>And it is all in a single line of text,<br>and ffmpeg allows for multiple video inputs, whhooh!</p>\n  <p>But once you know that it is just three things,<br>you are able to imagine everything in your mind.</p>\n  <p>ffmpeg makes it so that all inut files are numbered from zero up,<br>and it names results of transformations, giving you a named connection point to which you can hook in a pipe to another operation.</p>\n  <p>So you say ZERO, which means the first file that was mentioned on the command line,<br>then black and white, as in transform video to a black and white movie, and then...</p>\n  <p>And then, you name the output of this transformation,<br>BW for example.</p>\n  <p>Now, you say BW (just like you said zero a moment ago),<br>followed by add movie grain, (just like we said black and white), and then another name GBW.</p>\n  <p>And now you use the GBW output point,<br>and connect it so some other transformation.</p>\n  <p>Here we think in threes,<br>INPUT_NAME, TRANSFORMATION, OUTPUT_NAME.</p>\n  <p>We are focusing on connecting transformed data to to other transforming programs,<br>our named output is connected to a filer as input.</p>\n  <p>And sometimes names are optional in sequential operations.<br>it makes them easy to read, so that you don't have to keep naming the outputs and referencing them in inputs.</p>\n  <p>It would be a fun project to create a Node-RED like user interface,<br>for ffmpeg, while you have exactly that in Blender, this program would crown ffmpeg with neat graphics.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>It is possible to reduce the entire Node-RED programs,<br>to hard to read command line, it would totally work - that is the power of keeping things simple.</p>\n  <p>Keeping down to a very primitive but capable system,<br>helps prevent leaky abstractions.</p>\n  <p>I think all abstractions are leaky,<br>it is just the nature of abstractions.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>What you have glanced here today,<br>also translates to Phone Apps.</p>\n  <p>A screenful or a card would represent a program,<br>swipes left and right would show you the incoming and outgoing connections.</p>\n  <p>A pinch out or zoom out would show the entire network of Pipes and Programs,<br>and if you create a Hub for Program-Card programmers.</p>\n  <p>Where people can set bounties on cards they need,<br>you have a marketplace.</p>\n  <p>By having this ability to request custom cards,<br>all your users become programmers.</p>\n</div>\n<div class=\"section\">\n  <hr>\n</div>\n<div class=\"section\">\n  <p>Take a look at <a href=\"https://github.com/topics/visual-programming?l=javascript\">Visual Programming Libraries on GitHub</a></p>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A pipe is a connection between two programs,<br>and through that pipe, we send an object that is altered to serve some final purpose.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Imagine you checking email,<br>you create a pipe between your computer and the email server.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then you send a request object,<br>with your password and user name.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The email server,<br>will respond with an object that contains emails.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So we have programs connected by pipes,<br>through which we send objects.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When you are writing a program,<br>you are creating a pipework that connects programs.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then when your user uses your program,<br>as they interact with buttons, they send objects down the pipes you created.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">While you can make a beautiful little program,<br>that takes good care of user-names and passwords, including their validation.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You don't have to do it,<br>there is a crude and perfectly functional way to do it with just the basic operations.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When a user clicks login,<br>and initializes an object down the login to email pipe.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Rather than doing something special for user name and password,<br>simply inject a new property to the object that the user initialized.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The first time you inject user-name,<br>second time you inject password.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This is a generic injection program,<br>where you specify the name of new properties.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then you follow up with a pop-up box,<br>that knows to ask for all the properties traveling down the pipe.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Nothing here is related to passwords,<br>it is just properties and a standard form.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">When working with pipes in a graphic environment,<br>such as Node-RED.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">You can group the generic operations together,<br>and save them as a program called a sub flow.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The name of this sub-flow would be ask for password,<br>It is perfectly reusable.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Any object sent through it,<br>will receive an injection of username and password fields, or variables.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And a automated popup,<br>will force the user to to fill in those two bits of information.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Pipes, Programs, Objects,<br>those three crazy simple things is all it takes to make programs.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This simplicity also reinforces,<br>efficiency.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">In more advanced programs like video editors that use pipes,<br>Blender is a good example.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Pipes enforce the idea that a video is never sent whole,<br>but only one frame at a time.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The video can be 100 terabytes,<br>but Blender will only take the memory needed for one frame, not the whole video.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This is what the word streaming means,<br>you are streaming a frame at a time down a connection pipe.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Rather than the user downloading the whole video,<br>this can be for efficiency reasons, or for the fact that the rest of the video does not yet exist.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">The black window command line that you see hackers use on TV,<br>is so powerful because it uses pipes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It uses the actual pipe character to separate programs,<br>and objects tend to be lines in a file.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">For example, to guess a weak password,<br>a hacker would have a common passwords dictionary file.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And it would be just one password per line,<br>they would then pipe the passwords to a login program.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Each line in a file is treated as an object,<br>the program reading the file would send objects one at a time to the program logging in.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">With a successful login,<br>the login program would break the pipe and exit with a happy message.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And none of the other passwords would continue being streamed,<br>as the pipe is broken, and everything exits, including the program sending the passwords.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">There are many ways that the concept of Program, Pipe, and Object are represented,<br>there are as many variations of this idea as there are programs that make use of it.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Old school programmers, don't like pipes,<br>they prefer to load an entire movie into memory, process it and be done with it.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">This is not a terrible idea,<br>operations on a video file in RAM are much, much faster then sending frames at a time through pipes.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Others hate the idea of just three things,<br>Program, Pipe, and Object.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">They are used to creating entire Virtual Systems,<br>with hundred of objects, including a Password Object, User name Object, a Login Object, that contains both...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And even a remote server object,<br>that is a virtual representation of the mail server.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Just having Program, Pipe, and Object,<br>is terrifying to them.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Having just three things,<br>allows for those standard operations like Inject, or Branch depending on whether the login failed or succeed.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">ffmpeg uses pipes in the single most terrifying way,<br>they construct trees of pipes, or meshes really.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And it is all in a single line of text,<br>and ffmpeg allows for multiple video inputs, whhooh!</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">But once you know that it is just three things,<br>you are able to imagine everything in your mind.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">ffmpeg makes it so that all inut files are numbered from zero up,<br>and it names results of transformations, giving you a named connection point to which you can hook in a pipe to another operation.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">So you say ZERO, which means the first file that was mentioned on the command line,<br>then black and white, as in transform video to a black and white movie, and then...</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And then, you name the output of this transformation,<br>BW for example.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Now, you say BW (just like you said zero a moment ago),<br>followed by add movie grain, (just like we said black and white), and then another name GBW.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And now you use the GBW output point,<br>and connect it so some other transformation.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Here we think in threes,<br>INPUT_NAME, TRANSFORMATION, OUTPUT_NAME.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">We are focusing on connecting transformed data to to other transforming programs,<br>our named output is connected to a filer as input.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">And sometimes names are optional in sequential operations.<br>it makes them easy to read, so that you don't have to keep naming the outputs and referencing them in inputs.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It would be a fun project to create a Node-RED like user interface,<br>for ffmpeg, while you have exactly that in Blender, this program would crown ffmpeg with neat graphics.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">It is possible to reduce the entire Node-RED programs,<br>to hard to read command line, it would totally work - that is the power of keeping things simple.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Keeping down to a very primitive but capable system,<br>helps prevent leaky abstractions.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">I think all abstractions are leaky,<br>it is just the nature of abstractions.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">What you have glanced here today,<br>also translates to Phone Apps.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A screenful or a card would represent a program,<br>swipes left and right would show you the incoming and outgoing connections.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">A pinch out or zoom out would show the entire network of Pipes and Programs,<br>and if you create a Hub for Program-Card programmers.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Where people can set bounties on cards they need,<br>you have a marketplace.</div>\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">By having this ability to request custom cards,<br>all your users become programmers.</div>\n  </div>\n</div>\n<div class=\"mb-5 section-spacer\">&nbsp;</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"section card-body mb-0 my-2\">\n    <div class=\"paragraph card-text card-stanza my-5 text-center\">Take a look at <a href=\"https://github.com/topics/visual-programming?l=javascript\">Visual Programming Libraries on GitHub</a></div>\n  </div>\n</div>",
  "print": "<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">A pipe is a connection between two programs,<br>and through that pipe, we send an object that is altered to serve some final purpose.</div>\n  <div class=\"paragraph\">Imagine you checking email,<br>you create a pipe between your computer and the email server.</div>\n  <div class=\"paragraph\">And then you send a request object,<br>with your password and user name.</div>\n  <div class=\"paragraph\">The email server,<br>will respond with an object that contains emails.</div>\n  <div class=\"paragraph\">So we have programs connected by pipes,<br>through which we send objects.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">When you are writing a program,<br>you are creating a pipework that connects programs.</div>\n  <div class=\"paragraph\">And then when your user uses your program,<br>as they interact with buttons, they send objects down the pipes you created.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">While you can make a beautiful little program,<br>that takes good care of user-names and passwords, including their validation.</div>\n  <div class=\"paragraph\">You don't have to do it,<br>there is a crude and perfectly functional way to do it with just the basic operations.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">When a user clicks login,<br>and initializes an object down the login to email pipe.</div>\n  <div class=\"paragraph\">Rather than doing something special for user name and password,<br>simply inject a new property to the object that the user initialized.</div>\n  <div class=\"paragraph\">The first time you inject user-name,<br>second time you inject password.</div>\n  <div class=\"paragraph\">This is a generic injection program,<br>where you specify the name of new properties.</div>\n  <div class=\"paragraph\">And then you follow up with a pop-up box,<br>that knows to ask for all the properties traveling down the pipe.</div>\n  <div class=\"paragraph\">Nothing here is related to passwords,<br>it is just properties and a standard form.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">When working with pipes in a graphic environment,<br>such as Node-RED.</div>\n  <div class=\"paragraph\">You can group the generic operations together,<br>and save them as a program called a sub flow.</div>\n  <div class=\"paragraph\">The name of this sub-flow would be ask for password,<br>It is perfectly reusable.</div>\n  <div class=\"paragraph\">Any object sent through it,<br>will receive an injection of username and password fields, or variables.</div>\n  <div class=\"paragraph\">And a automated popup,<br>will force the user to to fill in those two bits of information.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Pipes, Programs, Objects,<br>those three crazy simple things is all it takes to make programs.</div>\n  <div class=\"paragraph\">This simplicity also reinforces,<br>efficiency.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">In more advanced programs like video editors that use pipes,<br>Blender is a good example.</div>\n  <div class=\"paragraph\">Pipes enforce the idea that a video is never sent whole,<br>but only one frame at a time.</div>\n  <div class=\"paragraph\">The video can be 100 terabytes,<br>but Blender will only take the memory needed for one frame, not the whole video.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">This is what the word streaming means,<br>you are streaming a frame at a time down a connection pipe.</div>\n  <div class=\"paragraph\">Rather than the user downloading the whole video,<br>this can be for efficiency reasons, or for the fact that the rest of the video does not yet exist.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">The black window command line that you see hackers use on TV,<br>is so powerful because it uses pipes.</div>\n  <div class=\"paragraph\">It uses the actual pipe character to separate programs,<br>and objects tend to be lines in a file.</div>\n  <div class=\"paragraph\">For example, to guess a weak password,<br>a hacker would have a common passwords dictionary file.</div>\n  <div class=\"paragraph\">And it would be just one password per line,<br>they would then pipe the passwords to a login program.</div>\n  <div class=\"paragraph\">Each line in a file is treated as an object,<br>the program reading the file would send objects one at a time to the program logging in.</div>\n  <div class=\"paragraph\">With a successful login,<br>the login program would break the pipe and exit with a happy message.</div>\n  <div class=\"paragraph\">And none of the other passwords would continue being streamed,<br>as the pipe is broken, and everything exits, including the program sending the passwords.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">There are many ways that the concept of Program, Pipe, and Object are represented,<br>there are as many variations of this idea as there are programs that make use of it.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Old school programmers, don't like pipes,<br>they prefer to load an entire movie into memory, process it and be done with it.</div>\n  <div class=\"paragraph\">This is not a terrible idea,<br>operations on a video file in RAM are much, much faster then sending frames at a time through pipes.</div>\n  <div class=\"paragraph\">Others hate the idea of just three things,<br>Program, Pipe, and Object.</div>\n  <div class=\"paragraph\">They are used to creating entire Virtual Systems,<br>with hundred of objects, including a Password Object, User name Object, a Login Object, that contains both...</div>\n  <div class=\"paragraph\">And even a remote server object,<br>that is a virtual representation of the mail server.</div>\n  <div class=\"paragraph\">Just having Program, Pipe, and Object,<br>is terrifying to them.</div>\n  <div class=\"paragraph\">Having just three things,<br>allows for those standard operations like Inject, or Branch depending on whether the login failed or succeed.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">ffmpeg uses pipes in the single most terrifying way,<br>they construct trees of pipes, or meshes really.</div>\n  <div class=\"paragraph\">And it is all in a single line of text,<br>and ffmpeg allows for multiple video inputs, whhooh!</div>\n  <div class=\"paragraph\">But once you know that it is just three things,<br>you are able to imagine everything in your mind.</div>\n  <div class=\"paragraph\">ffmpeg makes it so that all inut files are numbered from zero up,<br>and it names results of transformations, giving you a named connection point to which you can hook in a pipe to another operation.</div>\n  <div class=\"paragraph\">So you say ZERO, which means the first file that was mentioned on the command line,<br>then black and white, as in transform video to a black and white movie, and then...</div>\n  <div class=\"paragraph\">And then, you name the output of this transformation,<br>BW for example.</div>\n  <div class=\"paragraph\">Now, you say BW (just like you said zero a moment ago),<br>followed by add movie grain, (just like we said black and white), and then another name GBW.</div>\n  <div class=\"paragraph\">And now you use the GBW output point,<br>and connect it so some other transformation.</div>\n  <div class=\"paragraph\">Here we think in threes,<br>INPUT_NAME, TRANSFORMATION, OUTPUT_NAME.</div>\n  <div class=\"paragraph\">We are focusing on connecting transformed data to to other transforming programs,<br>our named output is connected to a filer as input.</div>\n  <div class=\"paragraph\">And sometimes names are optional in sequential operations.<br>it makes them easy to read, so that you don't have to keep naming the outputs and referencing them in inputs.</div>\n  <div class=\"paragraph\">It would be a fun project to create a Node-RED like user interface,<br>for ffmpeg, while you have exactly that in Blender, this program would crown ffmpeg with neat graphics.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">It is possible to reduce the entire Node-RED programs,<br>to hard to read command line, it would totally work - that is the power of keeping things simple.</div>\n  <div class=\"paragraph\">Keeping down to a very primitive but capable system,<br>helps prevent leaky abstractions.</div>\n  <div class=\"paragraph\">I think all abstractions are leaky,<br>it is just the nature of abstractions.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">What you have glanced here today,<br>also translates to Phone Apps.</div>\n  <div class=\"paragraph\">A screenful or a card would represent a program,<br>swipes left and right would show you the incoming and outgoing connections.</div>\n  <div class=\"paragraph\">A pinch out or zoom out would show the entire network of Pipes and Programs,<br>and if you create a Hub for Program-Card programmers.</div>\n  <div class=\"paragraph\">Where people can set bounties on cards they need,<br>you have a marketplace.</div>\n  <div class=\"paragraph\">By having this ability to request custom cards,<br>all your users become programmers.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <br>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <div class=\"paragraph\">Take a look at <span>Visual Programming Libraries on GitHub<sup>[1]</sup></span></div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://github.com/topics/visual-programming?l=javascript</div>\n</div>",
  "text": "A pipe is a connection between two programs,\nand through that pipe, we send an object that is altered to serve some final purpose.\nImagine you checking email,\nyou create a pipe between your computer and the email server.\nAnd then you send a request object,\nwith your password and user name.\nThe email server,\nwill respond with an object that contains emails.\nSo we have programs connected by pipes,\nthrough which we send objects.\n\nWhen you are writing a program,\nyou are creating a pipework that connects programs.\nAnd then when your user uses your program,\nas they interact with buttons, they send objects down the pipes you created.\n\nWhile you can make a beautiful little program,\nthat takes good care of user-names and passwords, including their validation.\nYou don't have to do it,\nthere is a crude and perfectly functional way to do it with just the basic operations.\n\nWhen a user clicks login,\nand initializes an object down the login to email pipe.\nRather than doing something special for user name and password,\nsimply inject a new property to the object that the user initialized.\nThe first time you inject user-name,\nsecond time you inject password.\nThis is a generic injection program,\nwhere you specify the name of new properties.\nAnd then you follow up with a pop-up box,\nthat knows to ask for all the properties traveling down the pipe.\nNothing here is related to passwords,\nit is just properties and a standard form.\n\nWhen working with pipes in a graphic environment,\nsuch as Node-RED.\nYou can group the generic operations together,\nand save them as a program called a sub flow.\nThe name of this sub-flow would be ask for password,\nIt is perfectly reusable.\nAny object sent through it,\nwill receive an injection of username and password fields, or variables.\nAnd a automated popup,\nwill force the user to to fill in those two bits of information.\n\nPipes, Programs, Objects,\nthose three crazy simple things is all it takes to make programs.\nThis simplicity also reinforces,\nefficiency.\n\nIn more advanced programs like video editors that use pipes,\nBlender is a good example.\nPipes enforce the idea that a video is never sent whole,\nbut only one frame at a time.\nThe video can be 100 terabytes,\nbut Blender will only take the memory needed for one frame, not the whole video.\n\nThis is what the word streaming means,\nyou are streaming a frame at a time down a connection pipe.\nRather than the user downloading the whole video,\nthis can be for efficiency reasons, or for the fact that the rest of the video does not yet exist.\n\nThe black window command line that you see hackers use on TV,\nis so powerful because it uses pipes.\nIt uses the actual pipe character to separate programs,\nand objects tend to be lines in a file.\nFor example, to guess a weak password,\na hacker would have a common passwords dictionary file.\nAnd it would be just one password per line,\nthey would then pipe the passwords to a login program.\nEach line in a file is treated as an object,\nthe program reading the file would send objects one at a time to the program logging in.\nWith a successful login,\nthe login program would break the pipe and exit with a happy message.\nAnd none of the other passwords would continue being streamed,\nas the pipe is broken, and everything exits, including the program sending the passwords.\n\nThere are many ways that the concept of Program, Pipe, and Object are represented,\nthere are as many variations of this idea as there are programs that make use of it.\n\nOld school programmers, don't like pipes,\nthey prefer to load an entire movie into memory, process it and be done with it.\nThis is not a terrible idea,\noperations on a video file in RAM are much, much faster then sending frames at a time through pipes.\nOthers hate the idea of just three things,\nProgram, Pipe, and Object.\nThey are used to creating entire Virtual Systems,\nwith hundred of objects, including a Password Object, User name Object, a Login Object, that contains both...\nAnd even a remote server object,\nthat is a virtual representation of the mail server.\nJust having Program, Pipe, and Object,\nis terrifying to them.\nHaving just three things,\nallows for those standard operations like Inject, or Branch depending on whether the login failed or succeed.\n\nffmpeg uses pipes in the single most terrifying way,\nthey construct trees of pipes, or meshes really.\nAnd it is all in a single line of text,\nand ffmpeg allows for multiple video inputs, whhooh!\nBut once you know that it is just three things,\nyou are able to imagine everything in your mind.\nffmpeg makes it so that all inut files are numbered from zero up,\nand it names results of transformations, giving you a named connection point to which you can hook in a pipe to another operation.\nSo you say ZERO, which means the first file that was mentioned on the command line,\nthen black and white, as in transform video to a black and white movie, and then...\nAnd then, you name the output of this transformation,\nBW for example.\nNow, you say BW (just like you said zero a moment ago),\nfollowed by add movie grain, (just like we said black and white), and then another name GBW.\nAnd now you use the GBW output point,\nand connect it so some other transformation.\nHere we think in threes,\nINPUT_NAME, TRANSFORMATION, OUTPUT_NAME.\nWe are focusing on connecting transformed data to to other transforming programs,\nour named output is connected to a filer as input.\nAnd sometimes names are optional in sequential operations.\nit makes them easy to read, so that you don't have to keep naming the outputs and referencing them in inputs.\nIt would be a fun project to create a Node-RED like user interface,\nfor ffmpeg, while you have exactly that in Blender, this program would crown ffmpeg with neat graphics.\n\nIt is possible to reduce the entire Node-RED programs,\nto hard to read command line, it would totally work - that is the power of keeping things simple.\nKeeping down to a very primitive but capable system,\nhelps prevent leaky abstractions.\nI think all abstractions are leaky,\nit is just the nature of abstractions.\n\nWhat you have glanced here today,\nalso translates to Phone Apps.\nA screenful or a card would represent a program,\nswipes left and right would show you the incoming and outgoing connections.\nA pinch out or zoom out would show the entire network of Pipes and Programs,\nand if you create a Hub for Program-Card programmers.\nWhere people can set bounties on cards they need,\nyou have a marketplace.\nBy having this ability to request custom cards,\nall your users become programmers.\n\nTake a look at Visual Programming Libraries on GitHub[1]\n \nReferences\n[1]: https://github.com/topics/visual-programming?l=javascript",
  "images": [],
  "links": [
    {
      "title": "Visual Programming Libraries on GitHub",
      "url": "https://github.com/topics/visual-programming?l=javascript",
      "hostname": "github.com"
    }
  ]
}