In the world of programming,
troubles are everywhere.
And they are huge,
I mean like, ridiculous.

Above all code is liability,
especially if you are a programmer.
The less you write,
the better.
And if you write none,
you are guaranteed success.

Fixing problems,
that people don’t have is the plague.
The bigger the company,
the more obvious that is.
From crap opp languages,
to datatypes in languages meant to be untyped.
And only for the purpose,
of annoying and distracting code popus.

Everything is broken,
and nobody is complaining.
Functionality is actually reduced,
news is mangled for ads.
And open source will soon come with,
closed source walled gardens.

And then there are the startup advisors,
Oooh!
‘If you have to search for users then you are doing it wrong’,
is terrible advice.
If you are going to listen to the same old advice,
you are only going to get the same old results.

In the face of all that nonsense,
you have to charm your users with real things.

Please, don’t annoy your users with drag and drop,
and useless animations
And endless low-information-density,
white-space.
And stop making apps,
that can’t make your users some spending money.

See it,
if yo do it right, all advice comes together.
Your users will come,
when they will see they can make money.
It is not a perfect idea,
but it is the era we are stuck in.

There is only one real way to make money,
and that is by helping your users build computer programs...
On their phones,
in their free time.
To do this in a way that isn’t annoying,
you have to guide them to keep programs simple.
And let them interact with code or text,
instead of drag and drop and pinch and zoom.
Be sure that the program structure
is just groups of sequential actions.
They open their screen to names of groups,
can open a group to look at actions inside...
and then configure actions, or stack functions,
and call other groups.
To keep everyone on top of the program structure,
show them a simple map of all the actions.
And of course,
create an action marketplace.
Where users can request actions of features,
post bounties, maybe buy large sets of actions at a discount and so on.
Actions are just small parts of program code,
that are ordered by the creators.
And pierced,
by the data that passes through the sequence.
It is called functional programming,
and it is so simple that it is trivial to create program maps.

While this is not how modern User Interfaces are programmed,
the actions can have end user interface components attacked to them.
For example, a user registration action,
can come with a user interface.
It won’t be useful when programming,
but it will pop up when the stream or string of actions is executed.
It makes sense that a user interface,
should be attached to a program component.
And if you like this,
then know that this is it.
But understand,
that you don't just show a form on the screen.
But instead, you are chatting with a program,
in a conversational user interface.
And it is chats all the way down,
from chatting with a robot about sending an email.
To chatting with one
to compose a new song.
This is how the old commuters worked,
and how chatbots work today.

Put the user interface,
on the run-time end of your actions and your coders will never complain.